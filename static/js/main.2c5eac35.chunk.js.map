{"version":3,"sources":["components/Intro.tsx","models/Types.ts","components/TaskComponent.tsx","components/TaskCardComponent.tsx","util/Utils.ts","components/CollapsibleSection.tsx","App.tsx","components/TaskList.tsx","components/CategoryTags.tsx","components/GithubExportForm.tsx","components/ExportDialog.tsx","components/LinkDialog.tsx","reportWebVitals.ts","components/RadioDefinition.tsx","components/Help.tsx","components/HelpButton.tsx","components/CustomRadioGroup.tsx","index.tsx"],"names":["Intro","introduction","onStartClick","className","dangerouslySetInnerHTML","__html","onClick","TaskCard","title","message","question","tasks","id","this","uuidv4","questionName","choiceValue","choice","metadata","contentData","questions","find","q","name","toString","console","log","choices","c","getChoiceFromContent","taskCard","debug","map","task","Task","details","visibleIf","taskCards","surveyModel","values","getAllValues","properties","getFilteredProperties","filteredCards","forEach","tc","filtered","filter","ConditionRunner","run","push","TaskComponent","isHighContrast","useState","isExpanded","setExpanded","highContrastColor","aria-label","color","TaskCardComponent","card","hasMessage","length","getCategorySectionId","category","isNullOrEmpty","str","trim","CollapsibleSection","taskMap","filterTasks","get","numTasks","reduce","prev","n","highContrastBorder","Fragment","style","border","TaskList","categories","Array","from","keys","CategoryTags","display","marginTop","modelProps","isBlocking","styles","main","maxWidth","dialogContentProps","type","DialogType","largeHeader","GithubExportForm","showForm","onClose","authToken","setAuthToken","repoOwner","setRepoOwner","repoName","setRepoName","progress","setProgress","failureLog","setFailureLog","Dialog","hidden","onDismiss","modalProps","href","TextField","label","onChange","_","newValue","ProgressIndicator","description","percentComplete","failure","DialogFooter","PrimaryButton","octokit","Octokit","plugin","throttling","auth","throttle","onRateLimit","retryAfter","options","warn","method","url","request","retryCount","info","onAbuseLimit","updateProgress","numFinished","progressIncrementer","issues","create","owner","repo","body","then","catch","reason","finally","handleGithubExport","text","DefaultButton","key","ExportDialog","show","onCsvExport","onGithubExport","onPdfExport","onLinkExport","selectedKey","setSelectedKey","React","ev","option","ChoiceGroup","setTimeout","error","LinkDialog","defaultValue","window","location","navigator","clipboard","writeText","isFirstRender","isDeserializing","autoscroll","isWideScreen","innerWidth","adjustVerticalAlignment","categoryDiv","document","getElementById","buttonDiv","minHeight","clientHeight","heightDiff","matches","paddingBottom","match","pb","parseInt","App","surveyData","showIntro","setShowIntro","showSurvey","setShowSurvey","undoStack","setUndoStack","showExportForm","setShowExportForm","showLinkDialog","setShowLinkDialog","showGithubForm","setShowGithubForm","setHighContrast","isMobileLayout","setMobileLayout","handleAfterRender","sender","state","URLSearchParams","search","test","getAllQuestions","valueMap","Map","numQuestions","i","pages","page","j","elements","charAt","choiceIx","value","set","firstUndoStack","deserializeState","handleValueChanged","isVisible","clearValue","URL","searchParams","serialized","found","k","serializeState","history","replaceState","countPreview","classList","add","remove","handleUndo","pop","oldState","handleClear","handleCategoryClick","categorySection","scrollIntoView","focus","useEffect","getComputedStyle","getElementsByClassName","getPropertyValue","titleBar","viewScenariosBar","surveyContainer","height","offsetHeight","scenarioContainer","footer","grid","svRows","handleResize","handleKeyPress","handleMouseClick","addEventListener","removeEventListener","data","fromQuestionChoice","cq","categoryTasks","t","createTaskMap","instructionHeader","surveyInstructions","instructionsMsg","scenarioHeader","taskInstructions","scenarioMsg","flat","handleAdoExport","csv","replaceAll","blob","Blob","saveAs","borderBottom","role","marginLeft","disabled","fontSize","paddingRight","paddingLeft","paddingTop","lineHeight","json","onAfterRenderPage","onValueChanged","print","padding","marginBottom","fontWeight","aria-labelledby","marginRight","fontStyle","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","RadioDefinition","definition","cancelIcon","iconName","theme","getTheme","contentStyles","mergeStyleSets","container","flexFlow","alignItems","header","fonts","xLargePlus","flex","borderTop","palette","themePrimary","neutralPrimary","FontWeights","semibold","overflowY","selectors","p","margin","iconButtonStyles","root","rootHovered","neutralDark","HelpDialog","examples","titleId","useId","visibleExamples","ex","filterExamples","example","width","Modal","titleAriaId","isOpen","containerClassName","IconButton","iconProps","ariaLabel","HelpButton","showHelp","setShowHelp","backgroundColor","minWidth","Help","CustomRadiogroup","cssClasses","items","contentQuestion","visibleChoices","contentChoice","merged","index","Math","floor","SurveyQuestionRadiogroup","initializeIcons","ReactQuestionFactory","Instance","registerQuestion","props","createElement","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2c5eac35.chunk.js","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// This component renders the introduction page for the survey, including\n// a message and a button to start the survey.\n\nimport React from 'react';\n\ninterface IntroProps {\n  introduction: string,\n  onStartClick(): void\n}\n\nconst Intro: React.FunctionComponent<IntroProps> = ({ introduction, onStartClick }) => {\n  return (\n    <div className=\"my-5\">\n      <div dangerouslySetInnerHTML={{ __html: introduction }} />\n      <button className=\"btn btn-primary\" onClick={onStartClick}>Start</button>\n    </div>\n  );\n}\n\nexport default Intro;","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// This file defines the types used in the application.\n\nimport contentData from '../data/content.json';\nimport { ConditionRunner } from 'survey-react'\nimport { surveyModel } from '../App'\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction getChoiceFromContent(questionName: string, choiceValue: string) {\n    if  (questionName == null || choiceValue == null) {\n      return null;\n    }\n    const metadata: any = contentData.questions.find((q: any) => q.name === questionName);\n    // The surveyjs framework sends a boolean value instead of string\n    // for boolean questions, so we need to force it to be a string\n    choiceValue = choiceValue.toString();\n    \n    if (metadata == null) {\n      console.log(\"Could not find question %s in content.json\", questionName);\n      return null;\n    }\n\n    if (metadata.choices == null) {\n      console.log(\"Missing choices array for question %s\", questionName);\n      return null;\n    }\n\n    return metadata.choices.find((c: any) => c.name === choiceValue);\n}\n\nexport class TaskCard {\n  title: string;\n  message: string;\n  question: string;\n  id: string;\n  tasks: Task[];\n\n  constructor(title: string, message: string, question: string, tasks: Task[]) {\n    this.title = title;\n    this.message = message;\n    this.tasks = tasks;\n    this.question = question;\n    this.id = uuidv4();\n  }\n\n  static fromQuestionChoice(questionName: string, choiceValue: string) {\n    const choice = getChoiceFromContent(questionName, choiceValue);\n    if (choice == null || choice.taskCard == null || choice.taskCard.tasks == null) {\n      console.debug(\"Null taskcard for question %s choice %s\", questionName, choiceValue);\n      return null;\n    }\n\n    const tasks = choice.taskCard.tasks.map((task: any) => { return new Task(task.name, task.details, task.visibleIf) });\n    return new TaskCard(choice.taskCard.title, choice.taskCard.message, questionName, tasks);\n  }\n\n  static filterTasks(taskCards: TaskCard[]) {\n    if (surveyModel) {\n      const values = surveyModel.getAllValues();\n      const properties = surveyModel.getFilteredProperties();\n      const filteredCards: TaskCard[] = [];\n      taskCards.forEach(tc => {\n        const filtered = tc.tasks.filter(task => new ConditionRunner(task.visibleIf ?? \"true\").run(values, properties))\n        filteredCards.push(new TaskCard(tc.title, tc.message, tc.question, filtered));\n      })\n      return filteredCards;\n    } else {\n      return taskCards;\n    }\n  }\n}\n\nexport class Task {\n  name: string;\n  details: string;\n  visibleIf: string;\n  id: string;\n\n  constructor(name: string, details: string, visibleIf: string) {\n    this.name = name;\n    this.details = details;\n    this.visibleIf = visibleIf;\n    this.id = uuidv4();\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport React, { useState } from 'react'\nimport { Task } from '../models/Types'\nimport { BsFillCaretRightFill, BsFillCaretDownFill } from 'react-icons/bs';\n\ninterface TaskProps {\n  task: Task,\n  isHighContrast: boolean\n}\n\nconst TaskComponent: React.FunctionComponent<TaskProps> = ({ task, isHighContrast }) => {\n  const [isExpanded, setExpanded] = useState(true);\n  const highContrastColor = isHighContrast ? \"#FFFFFF\" : \"#000000\";\n  return (\n    <div key={task.id} className=\"task-card\">\n      <button aria-label={`Show or hide ${task.name} task details`} className=\"task-header-button\" onClick={() => setExpanded(!isExpanded)}>\n        <span className=\"task-header-caret\">{isExpanded ? <BsFillCaretDownFill aria-label=\"down arrow\" color={highContrastColor}/> : <BsFillCaretRightFill aria-label=\"right arrow\" color={highContrastColor}/>}</span>\n        <h5 className=\"task-header-text\">{task.name}</h5>\n      </button>\n      {isExpanded ? <div dangerouslySetInnerHTML={{ __html: task.details }} /> : null}\n    </div>\n  )\n}\n\nexport default TaskComponent;","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// This component renders the card for a group of tasks\n// The rendered structure looks like this:\n//\n// <message>\n// <task_1>\n// ...\n// <task_n>\n\nimport React from 'react'\nimport { TaskCard } from '../models/Types';\nimport TaskComponent from './TaskComponent';\n\ninterface TaskCardProps {\n  card: TaskCard,\n  isHighContrast: boolean\n}\n\nconst TaskCardComponent: React.FunctionComponent<TaskCardProps> = ({ card, isHighContrast }) => {\n  const hasMessage = card.message != null && card.message.length > 0;\n  return (\n    <div className=\"normal-text\">\n      { hasMessage ? <div className=\"my-3\" dangerouslySetInnerHTML={{ __html: card.message }} /> : null}\n      { card.tasks.length !== 0 ? \n        <>\n          {card.tasks.map(task => (\n            <TaskComponent task={task} isHighContrast={isHighContrast}/>\n          ))}\n        </> : null }\n    </div>\n  )\n}\n\nexport default TaskCardComponent;","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// Put general helper functions here\n\nexport function getCategorySectionId(category: string) {\n  return `${category}_section`\n}\n\nexport function isNullOrEmpty(str: string) {\n  return (!str || str.trim().length === 0 );\n}","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport React, { useState } from 'react';\nimport { TaskCard } from '../models/Types';\nimport TaskCardComponent from './TaskCardComponent';\nimport { BsFillCaretRightFill, BsFillCaretDownFill } from 'react-icons/bs';\nimport { getCategorySectionId } from '../util/Utils'\n\ninterface CollapsibleSectionProps {\n  taskMap: Map<string, TaskCard[]>,\n  category: string,\n  isHighContrast: boolean\n}\n\nconst CollapsibleSection: React.FunctionComponent<CollapsibleSectionProps> = ({ taskMap, category, isHighContrast }) => {\n  const [isExpanded, setExpanded] = useState(true);\n  const tasks = TaskCard.filterTasks(taskMap.get(category) ?? []);\n  const numTasks = tasks.map(task => task.tasks.length).reduce((prev, n) => prev + n) ?? 0;\n  const hasMessage = tasks.find(tc => !!tc.message) != null;\n  const highContrastBorder = isHighContrast ? \"solid white 1px\" : \"\";\n  const highContrastColor = isHighContrast ? \"#FFFFFF\" : \"#000000\";\n  // If there are no tasks and there's no message for the category, then render nothing\n  return (numTasks > 0 || hasMessage) ? (\n    <React.Fragment>\n      <button id={getCategorySectionId(category)} className=\"scenario-bar my-3\" aria-label={`Expand or collapse ${category} section`} onClick={() => setExpanded(!isExpanded)} style={{border: highContrastBorder}}>\n        {isExpanded ? <BsFillCaretDownFill aria-label=\"down arrow\" color={highContrastColor}/> : <BsFillCaretRightFill aria-label=\"right arrow\" color={highContrastColor}/>}\n        <h4 className=\"scenario-bar-text\">{category}</h4>\n      </button>\n      {isExpanded ? tasks.map(tc => <TaskCardComponent key={tc.id} card={tc} isHighContrast={isHighContrast}/>) : null}\n    </React.Fragment>\n  ) : null;\n}\n\nexport default CollapsibleSection;","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// The App component is the top-level component of the application.\n// This component manages the state of the survey and determines\n// which page to show based on the status of the survey.\n\nimport React, { useEffect, useState } from 'react';\nimport { ReactSurveyModel, Survey } from 'survey-react';\nimport Intro from './components/Intro';\nimport TaskList from './components/TaskList';\nimport CategoryTags from './components/CategoryTags';\nimport { TaskCard } from './models/Types';\nimport { SurveyValueChangedOptions } from './models/SurveyCallbackTypes';\nimport GithubExportForm from './components/GithubExportForm';\nimport ExportDialog from './components/ExportDialog';\nimport LinkDialog from './components/LinkDialog';\nimport { BsArrowCounterclockwise, BsChevronLeft, BsChevronRight } from 'react-icons/bs';\nimport { saveAs } from 'file-saver';\nimport { getCategorySectionId, isNullOrEmpty } from './util/Utils';\n\ninterface AppProps {\n  surveyData: any,\n  contentData: any\n}\n\n// Captures the survey model object after the page renders\n// Exposes some encapsulated state needed for undo functionality\nexport let surveyModel: ReactSurveyModel;\n\n// SurveyJS will re-render its component when pages are changed or when the\n// app switches from mobile to desktop view. Some things need to only happen\n// on the first render.\nlet isFirstRender = true;\nlet isDeserializing = false;\nlet autoscroll = true;\n\nfunction createTaskMap(contentData: any) {\n  const questions = surveyModel?.getAllQuestions() ?? [];\n  const taskMap = new Map<string, TaskCard[]>();\n  questions.forEach(q => {\n    const tc = TaskCard.fromQuestionChoice(q.name, q.value);\n    if (tc != null) {\n      const category: any = contentData.questions.find((cq: any) => cq.name === q.name)?.category;\n      let categoryTasks = taskMap.get(category);\n      if (categoryTasks) {\n        const filtered = categoryTasks.filter((t: TaskCard) => t.question !== q.name);\n        filtered.push(tc);\n        categoryTasks = filtered;\n      } else {\n        categoryTasks = [tc];\n      }\n      taskMap.set(category, categoryTasks);\n    }\n  });\n  return taskMap;\n}\n\nfunction isWideScreen() {\n  return window.innerWidth > 425;\n}\n\n// Switches the survey to multi-page or single-page format\n// eslint-disable-next-line\nfunction arrangeSurveyPages(surveyData: any, isMobileLayout: boolean) {\n  const surveyQuestions = [];\n  for (let i = 0; i < surveyData.pages?.length; i++) {\n    const page = surveyData.pages[i];\n    for (let j = 0; j < page.elements?.length; j++) {\n      surveyQuestions.push(page.elements[j]);\n    }\n  }\n  surveyData.pages = [];\n  if (isMobileLayout) {\n    // Split the survey into multiple pages\n    for (let q of surveyQuestions) {\n      surveyData.pages.push({ elements: [q] });\n    }\n  } else {\n    // Combine all pages into 1 page\n    surveyData.pages.push({ elements: surveyQuestions });\n  }\n  return surveyData;\n}\n\n// vertically align the button row with the category tags row\nfunction adjustVerticalAlignment() {\n  const categoryDiv = document.getElementById(\"category-container\");\n  const buttonDiv = document.getElementById(\"survey-buttons\");\n  if (categoryDiv && buttonDiv) {\n    if (isNullOrEmpty(categoryDiv.style.minHeight)) {\n      categoryDiv.style.minHeight = `${buttonDiv.clientHeight}px`;\n    }\n    const heightDiff = categoryDiv.clientHeight - buttonDiv.clientHeight;\n    // parse the padding - it will be in format of \"5px\"\n    const matches = buttonDiv.style.paddingBottom?.match(/[0-9]+/);\n    const pb = matches == null ? 0 : parseInt(matches[0]);\n\n    if (heightDiff !== 0) {\n      buttonDiv.style.paddingBottom = `${pb + heightDiff}px`;\n    }\n  }\n}\n\nconst App: React.FunctionComponent<AppProps> = ({ surveyData, contentData }) => {\n  const [showIntro, setShowIntro] = useState(true);\n  const [showSurvey, setShowSurvey] = useState(true);\n  const [undoStack, setUndoStack] = useState(new Array<Map<string, string>>());\n  const [showExportForm, setShowExportForm] = useState(false);\n  const [showLinkDialog, setShowLinkDialog] = useState(false);\n  const [showGithubForm, setShowGithubForm] = useState(false);\n  const [isHighContrast, setHighContrast] = useState(false);\n  const [isMobileLayout, setMobileLayout] = useState(!isWideScreen());\n\n  console.log(\"STATE: showIntro=\", showIntro, \" showSurvey=\", showSurvey,\n    \" isMobileLayout=\", isMobileLayout, \" isHighContrast=\", isHighContrast);\n\n  //surveyData = arrangeSurveyPages(surveyData, isMobileLayout);\n\n  const deserializeState = (state: string) => {\n    console.log(\"Deserializing state: \", state);\n    let regex = /^[0-9x]*$/g;\n    if (!regex.test(state)) {\n      console.error(\"Unsupported state string: \", state);\n      return;\n    }\n\n    const questions = surveyModel.getAllQuestions();\n    if (state.length !== questions.length) {\n      console.error(\"State string length != number of questions\");\n      return;\n    }\n\n    const valueMap = new Map<string, string>();\n    let numQuestions = 0;\n    isDeserializing = true;\n    for (let i = 0; i < surveyData.pages?.length; i++) {\n      const page = surveyData.pages[i];\n      for (let j = 0; j < page.elements?.length; j++) {\n        numQuestions++;\n        if (numQuestions > state.length) {\n          console.error(\"survey.json contains more questions than state\");\n          isDeserializing = false;\n          return;\n        }\n        if (state.charAt(j) === \"x\") {\n          continue;\n        }\n        const choiceIx = parseInt(state.charAt(j));\n        const value = page.elements[j].choices[choiceIx]?.value;\n        const questionName = page.elements[j].name;\n        if (value) {\n          valueMap.set(questionName, value);\n        } else {\n          console.error(`Choice not found for state index=${j}`);\n          isDeserializing = false;\n          return;\n        }\n      }\n    }\n\n    questions.forEach(q => {\n      q.value = valueMap.get(q.name);\n    });\n    if (isFirstRender) {\n      // Set the undo stack up if the page is loading from a saved state\n      let valueMap = new Map<string, string>();\n      let firstUndoStack: Map<string, string>[] = []\n      questions.forEach(q => {\n        if (q.value) {\n          valueMap = new Map<string, string>(valueMap);\n          valueMap.set(q.name, q.value);\n          firstUndoStack = [...firstUndoStack, valueMap];\n        }\n      });\n      setUndoStack(firstUndoStack);\n    }\n    isDeserializing = false;\n    console.log(\"Deserialization successful\", valueMap);\n  }\n\n  const serializeState = () => {\n    if (surveyModel == null) {\n      console.log(\"Can't serialize: surveyModel is undefined\");\n      return \"\";\n    }\n\n    // Values is a map of {questionName: questionValue}\n    const values = surveyModel.getAllValues();\n    let serialized = \"\";\n    for (let i = 0; i < surveyData.pages?.length; i++) {\n      let page = surveyData.pages[i];\n      for (let j = 0; j < page.elements?.length; j++) {\n        let choices = page.elements[j].choices;\n        let questionName = page.elements[j].name;\n        let found = false;\n        for (let k = 0; k < choices?.length && !found; k++) {\n          if (values[questionName] === choices[k].value) {\n            serialized += k;\n            found = true;\n          }\n        }\n        if (!found) {\n          serialized += \"x\";\n        }\n      }\n    }\n\n    console.log(\"Serialized state: \", serialized);\n    return serialized;\n  }\n\n  const handleAfterRender = (sender: ReactSurveyModel, options: any) => {\n    console.log(\"AfterRender\", sender, options);\n    surveyModel = sender;\n    const urlParams = new URLSearchParams(window.location.search);\n    const state = urlParams.get('state');\n    if (state) {\n      deserializeState(state);\n    }\n    isFirstRender = false;\n  }\n\n  const handleValueChanged = (sender: ReactSurveyModel, options: SurveyValueChangedOptions) => {\n    if (isDeserializing) {\n      return;\n    }\n    console.log(\"ValueChanged\", sender, options);\n    const questions = sender.getAllQuestions();\n    const valueMap = new Map<string, string>();\n    questions.forEach(q => {\n      // Clear answers from invisible questions\n      // Questions can become invisible when the user changes a previous selection\n      if (!q.isVisible) {\n        q.clearValue();\n      }\n      valueMap.set(q.name, q.value);\n    });\n    setUndoStack([...undoStack, valueMap]);\n\n    const url = new URL(window.location.toString());\n    url.searchParams.set(\"state\", serializeState());\n    window.history.replaceState({}, '', url.toString());\n\n    const countPreview = document.getElementById(\"scenario-count-preview\");\n    if (countPreview) {\n      countPreview.classList.add(\"pulse-animation\")\n      setTimeout(() => {\n        countPreview.classList.remove(\"pulse-animation\");\n      }, 1500)\n    }\n  }\n\n  const handleUndo = () => {\n    if (surveyModel == null) {\n      console.log(\"Can't undo: surveyModel is undefined\");\n      return;\n    }\n\n    const questions = surveyModel.getAllQuestions();\n    questions.forEach(q => {\n      q.clearValue();\n    });\n\n    if (undoStack.length > 1) {\n      // The last thing pushed on the stack is the current state\n      // We need to pop it off first to get the old state\n      undoStack.pop();\n      const oldState = undoStack[undoStack.length - 1];\n      questions.forEach(q => {\n        q.value = oldState?.get(q.name);\n      });\n      setUndoStack([...undoStack]);\n    } else {\n      setUndoStack([]);\n    }\n  }\n\n  const handleClear = () => {\n    if (surveyModel == null) {\n      console.log(\"Can't clear: surveyModel is undefined\");\n      return;\n    }\n\n    const questions = surveyModel.getAllQuestions();\n    questions.forEach(q => {\n      q.clearValue();\n    });\n  }\n\n  const handleCategoryClick = (category: string) => {\n    const categorySection = document.getElementById(getCategorySectionId(category))\n    if (categorySection) {\n      categorySection.scrollIntoView(true);\n      categorySection.focus();\n    }\n  }\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(() => {\n    if (showIntro) return;\n\n    // Detect high contrast mode by checking if the background color has been modified\n    if (!isHighContrast) {\n      const leftColumnBg = window.getComputedStyle(document.getElementsByClassName(\"title-bar\")[0], null).getPropertyValue('background-color'); \n      if (leftColumnBg !== \"rgb(0, 27, 46)\") {\n        setHighContrast(true);\n      }\n    }\n\n    // Resize the page to fill the screen vertically\n    const titleBar = document.getElementById(\"title-bar\");\n    if (isMobileLayout) {\n      const viewScenariosBar = document.getElementById(\"view-scenarios-bar\");\n      const surveyContainer = document.getElementById(\"survey-container\");\n      if (surveyContainer) {\n        if (viewScenariosBar) {\n          surveyContainer.style.height = `calc(100vh - ${titleBar?.offsetHeight}px - ${viewScenariosBar?.offsetHeight}px)`;\n        } else {\n          surveyContainer.style.height = `calc(100vh - ${titleBar?.offsetHeight}px)`;\n        }\n      }\n\n      const scenarioContainer = document.getElementById(\"scenario-header-container\");\n      if (scenarioContainer) {\n        scenarioContainer.style.height = \"\";\n      }\n    } else {\n      const footer = document.getElementById(\"footer\");\n      const grid = document.getElementById(\"two-column-grid\");\n      if (grid) {\n        grid.style.height = `calc(100vh - ${footer?.offsetHeight}px - ${titleBar?.offsetHeight}px)`;\n      }\n      adjustVerticalAlignment();\n    }\n\n    // Auto-scroll when the user selects a choice\n    if (autoscroll) {\n      const svRows = document.getElementsByClassName(\"sv_row\");\n      if (svRows.length > 0) {\n        svRows[svRows.length - 1].scrollIntoView(true);\n      }\n    }\n\n    const handleResize = () => {\n      if (isMobileLayout && isWideScreen()) {\n        console.log(\"Switching to desktop layout\");\n        setMobileLayout(false);\n      } else if (!isMobileLayout && !isWideScreen()) {\n        console.log(\"Switching to mobile layout\");\n        setMobileLayout(true);\n      } else if (!isMobileLayout) {\n        adjustVerticalAlignment();\n      }\n    }\n\n    const handleKeyPress = () => {\n      autoscroll = false;\n    }\n\n    const handleMouseClick = () => {\n      autoscroll = true;\n    }\n\n    window.addEventListener('resize', handleResize);\n    document.addEventListener('keypress', handleKeyPress);\n    document.addEventListener('mousedown', handleMouseClick);\n    return function cleanup() {\n      window.removeEventListener('resize', handleResize);\n      document.removeEventListener('keypress', handleKeyPress);\n      document.removeEventListener('mousedown', handleMouseClick);\n    };\n  });\n\n  if (showIntro) {\n    // Only show intro page if introduction message is defined\n    const data: any = contentData;\n    if (data.introduction == null || data.introduction.length === 0) {\n      setShowIntro(false);\n    } else {\n      return (\n        <div className=\"row justify-content-center\">\n          <Intro introduction={data.introduction} onStartClick={() => setShowIntro(false)} />\n        </div>\n      );\n    }\n  }\n\n  const taskMap = createTaskMap(contentData);\n  const instructionHeader = contentData.surveyInstructions?.title;\n  const instructionsMsg = contentData.surveyInstructions?.message;\n  const scenarioHeader = contentData.taskInstructions?.title;\n  const scenarioMsg = contentData.taskInstructions?.message;\n  const categories = Array.from(taskMap.keys());\n  const highContrastBorder = isHighContrast ? \"solid white 1px\" : \"\";\n  const numTasks = categories.length === 0 ? 0 :\n    categories.map(category => TaskCard.filterTasks(taskMap.get(category) ?? []))\n      .flat()\n      .map(card => card.tasks)\n      .map(tasks => tasks.length)\n      .reduce((prev, n) => prev + n);\n\n  const handleAdoExport = () => {\n    let csv = \"Work Item Type,Title,Description\\n\";\n    for (const category of categories) {\n      const taskCards = taskMap.get(category) ?? [];\n      for (const card of taskCards) {\n        for (const task of card.tasks) {\n          // In CSV, quotation marks are escaped with 2 quotation marks\n          // e.g. \"Hello World\" => \"\"Hello World\"\"\n          const name = task.name.replaceAll(/\"/g, \"\\\"\\\"\");\n          const details = task.details.replaceAll(/\"/g, \"\\\"\\\"\");\n          csv += `\"Issue\",\"${category}: ${name}\",\"${details}\"\\n`;\n        }\n      }\n    }\n    const blob = new Blob([csv], { type: \"text/csv\" });\n    saveAs(blob, \"azureDevOps.csv\");\n  }\n\n  if (isMobileLayout) {\n    return (\n      <div>\n        { showSurvey ?\n          <div className=\"mobile-grid\">\n            <div id=\"title-bar\" className=\"title-bar\" style={{borderBottom: highContrastBorder}}>\n              <header role=\"banner\" className=\"title-bar-text\">Network Playbook for Azure Machine Learning</header>\n              <div id=\"survey-buttons\" style={{ marginLeft: \"auto\" }} className=\"d-flex justify-content-end\">\n                <button aria-label=\"Restart\" onClick={handleClear} className=\"blue-button\">Restart</button>\n                <button aria-label=\"Undo\" onClick={handleUndo} disabled={undoStack.length === 0} className=\"blue-button ml-3\"><BsArrowCounterclockwise /> Undo</button>\n              </div>\n            </div>\n            { numTasks > 0 ? \n            <button onClick={() => setShowSurvey(false)} className=\"view-scenarios-bar\" id=\"view-scenarios-bar\">\n              <span style={{ color: \"white\" }}>View testing scenarios</span>\n              <div className=\"circle-text circle-text-large\" id=\"scenario-count-preview\" style={{border: highContrastBorder}}>\n                {numTasks}\n              </div>\n              <BsChevronRight color={isHighContrast ? \"#FFFFFF\" : \"#708491\"} style={{ marginLeft: \"auto\", fontSize: \"24px\", paddingRight: \"2%\" }} />\n            </button>\n            : <div></div> }\n            <div className=\"left-column scroll-pane\" id=\"survey-container\">\n              <div className=\"column-header\">\n                <span style={{ paddingLeft: \"4%\", paddingTop: \"16px\", fontSize: \"22px\", lineHeight: \"26px\", color: \"#ACDEFB\" }}>{instructionHeader}</span>\n              </div>\n              <Survey json={surveyData} onAfterRenderPage={handleAfterRender} onValueChanged={handleValueChanged} />\n            </div>\n          </div>\n          :\n          <>\n            <div id=\"title-bar\" className=\"title-bar\" style={{borderBottom: highContrastBorder}}>\n              <header role=\"banner\" className=\"title-bar-text\">HAX Playbook</header>\n              <div style={{ marginLeft: \"auto\" }} className=\"d-flex justify-content-end\">\n                <button aria-label=\"Export\" onClick={() => { setShowExportForm(true) }} className=\"blue-button\">Export</button>\n                <ExportDialog \n                  show={showExportForm}\n                  onClose={() => setShowExportForm(false)}\n                  onCsvExport={handleAdoExport}\n                  onGithubExport={() => setShowGithubForm(true)}\n                  onPdfExport={() => window.print()}\n                  onLinkExport={() => setShowLinkDialog(true)}/>\n                <LinkDialog \n                  show={showLinkDialog}\n                  onClose={() => setShowLinkDialog(false)} />\n                <GithubExportForm taskMap={taskMap} numTasks={numTasks} showForm={showGithubForm} onClose={() => setShowGithubForm(false)} />\n              </div>\n            </div>\n            <button onClick={() => setShowSurvey(true)} className=\"back-bar\" style={{border: isHighContrast ? \"solid white 1px\" : \"\", marginLeft: \"15px\", padding: \"10px 0px\"}}>\n              <BsChevronLeft color={isHighContrast ? \"#FFFFFF\" : \"#004578\"} style={{ fontSize: \"18px\", marginBottom: \"2px\" }} />\n              <div style={{display: \"inline-block\", marginLeft: \"5px\"}}>Back to survey</div>\n            </button>\n            <div className=\"right-column d-flex flex-row align-items-center\" id=\"scenario-header-container\">\n              <div className=\"mb-3 column-header\" >\n                <span style={{fontSize: \"22px\", color:\"#004578\", fontWeight: \"bold\"}}>{scenarioHeader}</span>\n              </div>\n            </div>\n            <div className=\"right-column pb-4\">\n              <span style={{ fontSize: \"14px\", border: highContrastBorder}}>Total scenarios:</span>\n              <div className=\"circle-text circle-text-large\" style={{border: highContrastBorder}}>\n                {numTasks}\n              </div>\n            </div>\n            <div className=\"right-column\">\n              {scenarioMsg != null && scenarioMsg.length > 0 ? <div className=\"mb-3 normal-text\" dangerouslySetInnerHTML={{ __html: instructionsMsg }} /> : null}\n            </div>\n            <div id=\"category-container\" className=\"right-column bottom-shadow\">\n              <CategoryTags taskMap={taskMap} onClick={handleCategoryClick} isHighContrast={isHighContrast}/>\n            </div>\n            <TaskList taskMap={taskMap} isHighContrast={isHighContrast}/>\n          </>\n        }\n      </div>\n    );\n  } else {\n    return (\n      <>\n        <div id=\"title-bar\" className=\"title-bar py-2\" style={{borderBottom: highContrastBorder}}>\n          <header role=\"banner\" className=\"title-bar-text ml-3\">Network Playbook for Azure Machine Learning</header>\n          <div style={{ marginLeft: \"auto\" }} className=\"d-flex justify-content-end\">\n            <button aria-label=\"Export\" onClick={() => setShowExportForm(true)} className=\"blue-button mr-3\">Export</button>\n          </div>\n          <ExportDialog \n            show={showExportForm}\n            onClose={() => setShowExportForm(false)}\n            onCsvExport={handleAdoExport}\n            onGithubExport={() => setShowGithubForm(true)}\n            onPdfExport={() => window.print()}\n            onLinkExport={() => setShowLinkDialog(true)}/>\n          <LinkDialog \n            show={showLinkDialog}\n            onClose={() => setShowLinkDialog(false)} />\n        </div>\n        <div id=\"two-column-grid\" className=\"two-column-grid\">\n          <main role=\"main\" className=\"left-column\">\n            <h1 className=\"my-3 column-header side-padding\">\n              {instructionHeader}\n            </h1>\n            { isNullOrEmpty(instructionsMsg) ? <div/> : <div className=\"mb-3 normal-text\" aria-label=\"survey instructions\" dangerouslySetInnerHTML={{ __html: instructionsMsg }} /> }\n            <div id=\"survey-buttons\" className=\"bottom-shadow side-padding\">\n              <button aria-label=\"Restart\" onClick={handleClear} className=\"blue-button\">Restart</button>\n              <button aria-label=\"Undo\" onClick={handleUndo} disabled={undoStack.length === 0} className=\"blue-button ml-3\"><BsArrowCounterclockwise /> Undo</button>\n            </div>\n            <div className=\"pt-3 scroll-pane\">\n              <Survey json={surveyData} onAfterRenderPage={handleAfterRender} onValueChanged={handleValueChanged} />\n            </div>\n          </main>\n          <div className=\"right-column\">\n            <div className=\"d-flex flex-row align-items-center\">\n              <h1 className=\"my-3 column-header side-padding\">\n                {scenarioHeader}\n              </h1>\n              <span id=\"total-scenarios-label\" style={{ marginLeft: \"auto\" }}>Total scenarios:</span>\n              <div className=\"circle-text circle-text-large\" aria-labelledby=\"total-scenarios-label\" style={{border: highContrastBorder}}>\n                {numTasks}\n              </div>\n            </div>\n            { isNullOrEmpty(scenarioMsg) ? <div/> : <div className=\"mb-3 normal-text\" dangerouslySetInnerHTML={{ __html: scenarioMsg }} /> }\n            <div id=\"category-container\" className=\"bottom-shadow side-padding\">\n              <CategoryTags taskMap={taskMap} onClick={handleCategoryClick} isHighContrast={isHighContrast}/>\n            </div>\n            <div className=\"scroll-pane side-padding\">\n              <TaskList taskMap={taskMap} isHighContrast={isHighContrast}/>\n            </div>\n          </div>\n        </div>\n        <GithubExportForm taskMap={taskMap} numTasks={numTasks} showForm={showGithubForm} onClose={() => setShowGithubForm(false)} />\n        <footer role=\"contentinfo\" id=\"footer\" className=\"footer\">\n          <span className=\"mx-3\">Copyright &copy; Microsoft Corporation</span>\n          <address style={{ marginLeft: \"auto\", marginRight: \"1em\", marginBottom: \"0px\", display: \"inline-block\", fontStyle: \"normal\" }}>\n            <a href=\"mailto:aiguidelines@microsoft.com\">Contact us</a>\n          </address>\n        </footer>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// This component renders the list of all task cards from the survey results\n\nimport React from 'react'\nimport { TaskCard } from '../models/Types';\nimport CollapsibleSection from './CollapsibleSection';\n\ninterface TaskListProps {\n  taskMap: Map<string, TaskCard[]>,\n  isHighContrast: boolean\n}\n\nconst TaskList: React.FunctionComponent<TaskListProps> = ({ taskMap, isHighContrast }) => {\n  const categories = Array.from(taskMap.keys());\n  return (\n    <div className=\"task-list\" >\n      {categories.map(category => (\n        <CollapsibleSection key={category} taskMap={taskMap} category={category} isHighContrast={isHighContrast}/>\n      ))}\n    </div>\n  )\n}\n\nexport default TaskList;","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// This component renders the card for a task\n\nimport React from 'react'\nimport { TaskCard } from '../models/Types';\n\ninterface CategoryTagsProps {\n  taskMap: Map<string, TaskCard[]>,\n  onClick: (category: string) => void,\n  isHighContrast: boolean\n}\n\nconst CategoryTags: React.FunctionComponent<CategoryTagsProps> = ({ taskMap, onClick, isHighContrast }) => {\n  const categories = Array.from(taskMap.keys());\n  const highContrastBorder = isHighContrast ? \"solid white 1px\" : \"\";\n  return (\n    <>\n      {categories.map(category => {\n        const tasks = TaskCard.filterTasks(taskMap.get(category) ?? []);\n        const numTasks = tasks.map(task => task.tasks.length).reduce((prev, n) => prev + n) ?? 0;\n        return (\n          <button aria-label={`Go to ${category} scenarios`} className=\"category-tag\" onClick={() => onClick(category)} style={{border: highContrastBorder}}>\n            <div style={{display: \"inline-block\", marginTop: \"-5px\"}}>{category}</div>\n            <div className=\"circle-text circle-text-small\" aria-label={`Number of ${category} scenarios`} style={{border: highContrastBorder}}>{numTasks}</div>\n          </button>\n        )\n      })}\n    </>\n  )\n}\n\nexport default CategoryTags;","import React, { useState } from 'react';\nimport { TaskCard } from '../models/Types';\nimport { Octokit } from \"@octokit/rest\";\nimport { throttling } from \"@octokit/plugin-throttling\";\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';\nimport { TextField } from '@fluentui/react/lib/TextField';\nimport { PrimaryButton, DefaultButton } from '@fluentui/react/lib/Button';\nimport { ProgressIndicator } from '@fluentui/react/lib/ProgressIndicator';\n\n// Fluent UI props\nconst modelProps = {\n  isBlocking: false,\n  styles: { main: { maxWidth: 450 } },\n};\nconst dialogContentProps = {\n  type: DialogType.largeHeader,\n  title: 'Github Export',\n};\n\ninterface GithubExportProps {\n  taskMap: Map<string, TaskCard[]>;\n  numTasks: number;\n  showForm: boolean;\n  onClose: Function;\n}\n\nconst GithubExportForm: React.FunctionComponent<GithubExportProps> = ({ taskMap, numTasks, showForm, onClose }) => {\n  const [authToken, setAuthToken] = useState(\"\");\n  const [repoOwner, setRepoOwner] = useState(\"\");\n  const [repoName, setRepoName] = useState(\"\");\n  const [progress, setProgress] = useState(0);\n  const [failureLog, setFailureLog] = useState(Array<any>());\n  const categories = Array.from(taskMap.keys());\n\n  const handleGithubExport = () => {\n    const Throttlekit = Octokit.plugin(throttling);\n    const octokit = new Throttlekit({\n      auth: authToken,\n      throttle: {\n        onRateLimit: (retryAfter: any, options: any, octokit: any) => {\n          octokit.log.warn(`Request quota exhausted for request ${options.method} ${options.url}`);\n          if (options.request.retryCount === 0) {\n            // only retries once\n            octokit.log.info(`Retrying after ${retryAfter} seconds!`);\n            return true;\n          }\n        },\n        onAbuseLimit: (retryAfter: any, options: any, octokit: any) => {\n          // does not retry, only logs a warning\n          octokit.log.warn(`Abuse detected for request ${options.method} ${options.url}`);\n        },\n      },\n    });\n\n    // Counts the number of finished promises\n    // The count has to be wrapped in a closure to avoid race conditions\n    // Fixes eslint no-loop-func warning\n    function progressIncrementer() {\n      let numFinished = 0;\n      function update() {\n        numFinished += 1;\n        setProgress(numFinished / numTasks);\n      }\n      return update;\n    }\n\n    let updateProgress = progressIncrementer();\n    for (const category of categories) {\n      const taskCards = TaskCard.filterTasks(taskMap.get(category) ?? []);\n      for (const card of taskCards) {\n        for (const task of card.tasks) {\n          let title = `${category}: ${task.name}`;\n          octokit.issues.create({\n            owner: repoOwner,\n            repo: repoName,\n            title: title,\n            body: task.details\n          }).then(() => {\n            console.log(\"Issue creation succeded\", title);\n          }).catch((reason) => {\n            console.log(\"Issue creation failed\", reason);\n            setFailureLog([...failureLog, reason]);\n          }).finally(() => {\n            updateProgress();\n          });\n        }\n      }\n    }\n  }\n\n  return (\n    <Dialog\n      hidden={!showForm}\n      onDismiss={() => onClose()}\n      dialogContentProps={dialogContentProps}\n      modalProps={modelProps}\n    >\n      <div>\n        <p>This form will export your survey results to issues on your GitHub repository.</p>\n        <p>Go to the <a href=\"https://github.com/settings/tokens\">token section of GitHub Developer Settings</a> to generate a personal access token.</p>\n      </div>\n      <TextField label=\"Repo owner\" onChange={(_, newValue) => setRepoOwner(newValue ?? \"\")}  />\n      <TextField label=\"Repo name\" onChange={(_, newValue) => setRepoName(newValue ?? \"\")}  />\n      <TextField label=\"Personal access token\" onChange={(_, newValue) => setAuthToken(newValue ?? \"\")}  />\n      {progress > 0 ? (\n        <ProgressIndicator label=\"Creating issues\" description=\"Issues are being created in your Github repository\" percentComplete={progress} />\n      ) : null}\n      {failureLog.map((failure) =>\n        (<div style={{ color: \"red\" }}>[Error] {`${failure}`}</div>)\n      )}\n      <DialogFooter>\n        <PrimaryButton onClick={() => handleGithubExport()} text=\"Export\" />\n        <DefaultButton onClick={() => onClose()} text=\"Cancel\" />\n      </DialogFooter>\n    </Dialog>\n  )\n}\n\nexport default GithubExportForm;","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';\nimport { PrimaryButton, DefaultButton } from '@fluentui/react/lib/Button';\nimport { ChoiceGroup, IChoiceGroupOption } from '@fluentui/react/lib/ChoiceGroup';\n\nconst options = [\n  {\n    key: 'CSV',\n    text: 'CSV',\n  },\n  {\n    key: 'Github',\n    text: 'Github',\n  },\n  {\n    key: 'PDF',\n    text: 'PDF',\n  },\n  {\n    key: 'link',\n    text: 'Shareable link'\n  }\n];\nconst modelProps = {\n  isBlocking: false,\n  styles: { main: { maxWidth: 450 } },\n};\nconst dialogContentProps = {\n  type: DialogType.largeHeader,\n  title: 'Export to',\n};\n\ninterface ExportDialogProps {\n  show: boolean,\n  onClose: Function,\n  onCsvExport: Function,\n  onGithubExport: Function,\n  onPdfExport: Function,\n  onLinkExport: Function\n}\n\nconst ExportDialog: React.FunctionComponent<ExportDialogProps> = ({ show, onClose, onCsvExport, onGithubExport, onPdfExport, onLinkExport }) => {\n  const [selectedKey, setSelectedKey] = useState(\"link\");\n\n  const onChange = React.useCallback((ev: React.SyntheticEvent<HTMLElement> | undefined, option: IChoiceGroupOption | undefined) => {\n    if (option) {\n      setSelectedKey(option.key);\n    }\n  }, []);\n\n  function doExport() {\n    onClose();\n    if (selectedKey === \"CSV\") {\n      onCsvExport();\n    } else if (selectedKey === \"Github\") {\n      onGithubExport();\n    } else if (selectedKey === \"PDF\") {\n      // This is timing sensitive - the page needs to re-render before we print it\n      // to avoid printing the export dialog window\n      setTimeout(onPdfExport, 250);\n    } else if (selectedKey === \"link\") {\n      onLinkExport();\n    } else {\n      console.error(\"Export - unknown selection\");\n    }\n  }\n\n  return (\n    <>\n      <Dialog\n        hidden={!show}\n        onDismiss={() => onClose()}\n        dialogContentProps={dialogContentProps}\n        modalProps={modelProps}\n      >\n        <ChoiceGroup selectedKey={selectedKey} options={options} onChange={onChange} />\n        <DialogFooter>\n          <PrimaryButton onClick={() => doExport()} text=\"Confirm\" />\n          <DefaultButton onClick={() => onClose()} text=\"Cancel\" />\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nexport default ExportDialog;","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport * as React from 'react';\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';\nimport { TextField } from '@fluentui/react/lib/TextField';\nimport { PrimaryButton, DefaultButton } from '@fluentui/react/lib/Button';\n\n// FluentUI props\nconst modelProps = {\n  isBlocking: false,\n  styles: { main: { maxWidth: 450 } },\n};\nconst dialogContentProps = {\n  type: DialogType.largeHeader,\n  title: 'Share your results',\n};\n\ninterface LinkDialogProps {\n  show: boolean,\n  onClose: Function\n}\n\nconst LinkDialog: React.FunctionComponent<LinkDialogProps> = ({ show, onClose }) => {\n  return (\n    <>\n      <Dialog\n        hidden={!show}\n        onDismiss={() => onClose()}\n        dialogContentProps={dialogContentProps}\n        modalProps={modelProps}\n      >\n        <div className=\"mb-3\">This link will contain the current survey answers.</div>\n        <TextField defaultValue={window.location.toString()} />\n        <DialogFooter>\n          <PrimaryButton onClick={() => navigator.clipboard.writeText(window.location.toString())} text=\"Copy\" />\n          <DefaultButton onClick={() => onClose()} text=\"Cancel\" />\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nexport default LinkDialog;","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport React from 'react'\n\ninterface RadioDefinitionProps {\n  definition: string\n}\n\nconst RadioDefinition: React.FunctionComponent<RadioDefinitionProps> = ({definition}) => {\n  return (\n    <div className=\"radio-definition\">\n      <span className=\"light-text\" aria-label=\"definition of survey choice\" dangerouslySetInnerHTML={{ __html: definition }}></span>\n    </div>);\n}\n\nexport default RadioDefinition;","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// This component renders the help cards shown below the survey\n\nimport * as React from 'react';\nimport { useId } from '@fluentui/react-hooks';\nimport {\n  getTheme,\n  mergeStyleSets,\n  FontWeights,\n  Modal,\n  IconButton,\n  IIconProps,\n} from '@fluentui/react';\nimport { surveyModel } from '../App'\nimport { ConditionRunner } from 'survey-react'\n\ninterface HelpProps {\n  name: string,\n  examples: Array<any>\n  show: boolean,\n  onClose: () => void\n}\n\nconst cancelIcon: IIconProps = { iconName: 'Cancel' };\n\nfunction filterExamples(examples: Array<any>) {\n  if (surveyModel) {\n    const values = surveyModel.getAllValues();\n    const properties = surveyModel.getFilteredProperties();\n    return examples.filter(ex => new ConditionRunner(ex.visibleIf ?? \"true\").run(values, properties));\n  } else {\n    console.log(\"Could not filter examples because surveyModel is null\");\n    return examples;\n  }\n}\n\nexport const HelpDialog: React.FunctionComponent<HelpProps> = ({ name, examples, show, onClose }) => {\n\n  // Use useId() to ensure that the IDs are unique on the page.\n  const titleId = useId('title');\n\n  const visibleExamples = filterExamples(examples);\n  console.debug(`Filtered ${visibleExamples.length} visible examples out of ${examples.length} total examples for help=${name}`);\n  const body = visibleExamples?.map((example, i) => {\n    return (\n      <div key={example.name}>\n        <h5>{example.name}</h5>\n        <div dangerouslySetInnerHTML={{ __html: example.details }}></div>\n        {i < visibleExamples.length-1 ? (<hr style={{ width: \"100%\", marginTop: \"1.5em\", marginBottom: \"1.5em\" }}/>) : null}\n      </div>\n    )\n  });\n\n  return (\n    <div>\n      <Modal\n        titleAriaId={titleId}\n        isOpen={show}\n        onDismiss={onClose}\n        isBlocking={false}\n        containerClassName={contentStyles.container}\n      >\n        <section>\n          <header className={contentStyles.header}>\n            <h3 id={titleId}>{name} - Examples</h3>\n            <IconButton\n              styles={iconButtonStyles}\n              iconProps={cancelIcon}\n              ariaLabel=\"Close popup modal\"\n              onClick={onClose}\n            />\n          </header>\n          <div className={contentStyles.body}>\n            {body}\n          </div>\n        </section>\n      </Modal>\n    </div>\n  );\n};\n\n// Fluent UI theme setup\nconst theme = getTheme();\nconst contentStyles = mergeStyleSets({\n  container: {\n    display: 'flex',\n    flexFlow: 'column nowrap',\n    alignItems: 'stretch',\n  },\n  header: [\n    theme.fonts.xLargePlus,\n    {\n      flex: '1 1 auto',\n      borderTop: `4px solid ${theme.palette.themePrimary}`,\n      color: theme.palette.neutralPrimary,\n      display: 'flex',\n      alignItems: 'center',\n      fontWeight: FontWeights.semibold,\n      padding: '12px 12px 14px 24px',\n    },\n  ],\n  body: {\n    flex: '4 4 auto',\n    padding: '0 24px 24px 24px',\n    overflowY: 'hidden',\n    selectors: {\n      p: { margin: '14px 0' },\n      'p:first-child': { marginTop: 0 },\n      'p:last-child': { marginBottom: 0 },\n    },\n  },\n});\nconst iconButtonStyles = {\n  root: {\n    color: theme.palette.neutralPrimary,\n    marginLeft: 'auto',\n    marginTop: '4px',\n    marginRight: '2px',\n  },\n  rootHovered: {\n    color: theme.palette.neutralDark,\n  },\n};\n\nexport default HelpDialog;","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport React, { useState } from 'react'\nimport { BsFillQuestionCircleFill } from 'react-icons/bs'\nimport Help from './Help';\n\ninterface HelpButtonProps {\n  name: string,\n  examples: Array<any>\n}\n\nconst HelpButton: React.FunctionComponent<HelpButtonProps> = ({ name, examples }) => {\n  const [showHelp, setShowHelp] = useState(false);\n\n  return (\n    <>\n      <button aria-label={`show ${name} help`} style={{ backgroundColor: \"transparent\", width: \"auto\", minWidth: \"20px\", padding: \"0px\" }} onClick={() => setShowHelp(true)} >\n        <BsFillQuestionCircleFill color=\"#6CCAFF\" style={{ marginTop: \"-3px\" }} />\n      </button>\n      <Help name={name} examples={examples} show={showHelp} onClose={() => setShowHelp(false)} />\n    </>\n  );\n}\n\nexport default HelpButton;","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { SurveyQuestionRadiogroup } from 'survey-react';\nimport * as React from 'react';\nimport contentData from '../data/content.json';\nimport RadioDefinition from './RadioDefinition';\nimport HelpButton from './HelpButton';\n\nexport class CustomRadiogroup extends SurveyQuestionRadiogroup {\n  protected getItems(cssClasses: any): Array<any> {\n    const items = super.getItems(cssClasses);\n\n    const contentQuestion: any = contentData.questions.find(q => q.name === this.question.name);\n\n    const elements = this.question.visibleChoices.map(choice => {\n      const contentChoice = contentQuestion.choices.find((cq: any) => cq.name === choice.value);\n      return (\n        contentChoice != null ? (\n          <>\n            <HelpButton name={choice.text} examples={contentChoice.examples} />\n            <RadioDefinition key={contentChoice.name + \"__customradiogroup\"}\n                            definition={contentChoice.definition}  />\n          </>\n        ) : null\n      )\n    });\n\n    const merged = Array(items.length * 2);\n    for (let i = 0; i < items.length * 2; i++) {\n      const index = Math.floor(i / 2);\n      merged[i] = (i % 2 === 0) ? items[index] : elements[index];\n    }\n\n    return merged;\n  }\n}\n\nexport default CustomRadiogroup;","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/survey.min.css';\nimport './css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport surveyData from './data/survey.json';\nimport contentData from './data/content.json';\nimport { ReactQuestionFactory } from 'survey-react';\nimport { CustomRadiogroup } from './components/CustomRadioGroup';\nimport { initializeIcons } from '@fluentui/react/lib/Icons';\n\ninitializeIcons();\n\n// ReactQuestionFactory sets the type of component that will be rendered for a given\n// type of question\nReactQuestionFactory.Instance.registerQuestion(\"radiogroup\", (props) => {\n  return React.createElement(CustomRadiogroup, props);\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App surveyData={surveyData} contentData={contentData} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}