{"ast":null,"code":"var _jsxFileName = \"/Users/keonabut/code/azureml-network-playbook/src/components/GithubExportForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { TaskCard } from '../models/Types';\nimport { Octokit } from \"@octokit/rest\";\nimport { throttling } from \"@octokit/plugin-throttling\";\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';\nimport { TextField } from '@fluentui/react/lib/TextField';\nimport { PrimaryButton, DefaultButton } from '@fluentui/react/lib/Button';\nimport { ProgressIndicator } from '@fluentui/react/lib/ProgressIndicator'; // Fluent UI props\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst modelProps = {\n  isBlocking: false,\n  styles: {\n    main: {\n      maxWidth: 450\n    }\n  }\n};\nconst dialogContentProps = {\n  type: DialogType.largeHeader,\n  title: 'Github Export'\n};\n\nconst GithubExportForm = ({\n  taskMap,\n  numTasks,\n  showForm,\n  onClose\n}) => {\n  _s();\n\n  const [authToken, setAuthToken] = useState(\"\");\n  const [repoOwner, setRepoOwner] = useState(\"\");\n  const [repoName, setRepoName] = useState(\"\");\n  const [progress, setProgress] = useState(0);\n  const [failureLog, setFailureLog] = useState(Array());\n  const categories = Array.from(taskMap.keys());\n\n  const handleGithubExport = () => {\n    const Throttlekit = Octokit.plugin(throttling);\n    const octokit = new Throttlekit({\n      auth: authToken,\n      throttle: {\n        onRateLimit: (retryAfter, options, octokit) => {\n          octokit.log.warn(`Request quota exhausted for request ${options.method} ${options.url}`);\n\n          if (options.request.retryCount === 0) {\n            // only retries once\n            octokit.log.info(`Retrying after ${retryAfter} seconds!`);\n            return true;\n          }\n        },\n        onAbuseLimit: (retryAfter, options, octokit) => {\n          // does not retry, only logs a warning\n          octokit.log.warn(`Abuse detected for request ${options.method} ${options.url}`);\n        }\n      }\n    }); // Counts the number of finished promises\n    // The count has to be wrapped in a closure to avoid race conditions\n    // Fixes eslint no-loop-func warning\n\n    function progressIncrementer() {\n      let numFinished = 0;\n\n      function update() {\n        numFinished += 1;\n        setProgress(numFinished / numTasks);\n      }\n\n      return update;\n    }\n\n    let updateProgress = progressIncrementer();\n\n    for (const category of categories) {\n      var _taskMap$get;\n\n      const taskCards = TaskCard.filterTasks((_taskMap$get = taskMap.get(category)) !== null && _taskMap$get !== void 0 ? _taskMap$get : []);\n\n      for (const card of taskCards) {\n        for (const task of card.tasks) {\n          let title = `${category}: ${task.name}`;\n          octokit.issues.create({\n            owner: repoOwner,\n            repo: repoName,\n            title: title,\n            body: task.details\n          }).then(() => {\n            console.log(\"Issue creation succeded\", title);\n          }).catch(reason => {\n            console.log(\"Issue creation failed\", reason);\n            setFailureLog([...failureLog, reason]);\n          }).finally(() => {\n            updateProgress();\n          });\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    hidden: !showForm,\n    onDismiss: () => onClose(),\n    dialogContentProps: dialogContentProps,\n    modalProps: modelProps,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This form will export your survey results to issues on your GitHub repository.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Go to the \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://github.com/settings/tokens\",\n          children: \"token section of GitHub Developer Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 22\n        }, this), \" to generate a personal access token.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Repo owner\",\n      onChange: (_, newValue) => setRepoOwner(newValue !== null && newValue !== void 0 ? newValue : \"\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Repo name\",\n      onChange: (_, newValue) => setRepoName(newValue !== null && newValue !== void 0 ? newValue : \"\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Personal access token\",\n      onChange: (_, newValue) => setAuthToken(newValue !== null && newValue !== void 0 ? newValue : \"\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), progress > 0 ? /*#__PURE__*/_jsxDEV(ProgressIndicator, {\n      label: \"Creating issues\",\n      description: \"Issues are being created in your Github repository\",\n      percentComplete: progress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this) : null, failureLog.map(failure => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\"\n      },\n      children: [\"[Error] \", `${failure}`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 10\n    }, this)), /*#__PURE__*/_jsxDEV(DialogFooter, {\n      children: [/*#__PURE__*/_jsxDEV(PrimaryButton, {\n        onClick: () => handleGithubExport(),\n        text: \"Export\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DefaultButton, {\n        onClick: () => onClose(),\n        text: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GithubExportForm, \"st4nwLqVc+CujqIBrGHBbouSV84=\");\n\n_c = GithubExportForm;\nexport default GithubExportForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubExportForm\");","map":{"version":3,"sources":["/Users/keonabut/code/azureml-network-playbook/src/components/GithubExportForm.tsx"],"names":["React","useState","TaskCard","Octokit","throttling","Dialog","DialogType","DialogFooter","TextField","PrimaryButton","DefaultButton","ProgressIndicator","modelProps","isBlocking","styles","main","maxWidth","dialogContentProps","type","largeHeader","title","GithubExportForm","taskMap","numTasks","showForm","onClose","authToken","setAuthToken","repoOwner","setRepoOwner","repoName","setRepoName","progress","setProgress","failureLog","setFailureLog","Array","categories","from","keys","handleGithubExport","Throttlekit","plugin","octokit","auth","throttle","onRateLimit","retryAfter","options","log","warn","method","url","request","retryCount","info","onAbuseLimit","progressIncrementer","numFinished","update","updateProgress","category","taskCards","filterTasks","get","card","task","tasks","name","issues","create","owner","repo","body","details","then","console","catch","reason","finally","_","newValue","map","failure","color"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { TaskCard } from '../models/Types';\nimport { Octokit } from \"@octokit/rest\";\nimport { throttling } from \"@octokit/plugin-throttling\";\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';\nimport { TextField } from '@fluentui/react/lib/TextField';\nimport { PrimaryButton, DefaultButton } from '@fluentui/react/lib/Button';\nimport { ProgressIndicator } from '@fluentui/react/lib/ProgressIndicator';\n\n// Fluent UI props\nconst modelProps = {\n  isBlocking: false,\n  styles: { main: { maxWidth: 450 } },\n};\nconst dialogContentProps = {\n  type: DialogType.largeHeader,\n  title: 'Github Export',\n};\n\ninterface GithubExportProps {\n  taskMap: Map<string, TaskCard[]>;\n  numTasks: number;\n  showForm: boolean;\n  onClose: Function;\n}\n\nconst GithubExportForm: React.FunctionComponent<GithubExportProps> = ({ taskMap, numTasks, showForm, onClose }) => {\n  const [authToken, setAuthToken] = useState(\"\");\n  const [repoOwner, setRepoOwner] = useState(\"\");\n  const [repoName, setRepoName] = useState(\"\");\n  const [progress, setProgress] = useState(0);\n  const [failureLog, setFailureLog] = useState(Array<any>());\n  const categories = Array.from(taskMap.keys());\n\n  const handleGithubExport = () => {\n    const Throttlekit = Octokit.plugin(throttling);\n    const octokit = new Throttlekit({\n      auth: authToken,\n      throttle: {\n        onRateLimit: (retryAfter: any, options: any, octokit: any) => {\n          octokit.log.warn(`Request quota exhausted for request ${options.method} ${options.url}`);\n          if (options.request.retryCount === 0) {\n            // only retries once\n            octokit.log.info(`Retrying after ${retryAfter} seconds!`);\n            return true;\n          }\n        },\n        onAbuseLimit: (retryAfter: any, options: any, octokit: any) => {\n          // does not retry, only logs a warning\n          octokit.log.warn(`Abuse detected for request ${options.method} ${options.url}`);\n        },\n      },\n    });\n\n    // Counts the number of finished promises\n    // The count has to be wrapped in a closure to avoid race conditions\n    // Fixes eslint no-loop-func warning\n    function progressIncrementer() {\n      let numFinished = 0;\n      function update() {\n        numFinished += 1;\n        setProgress(numFinished / numTasks);\n      }\n      return update;\n    }\n\n    let updateProgress = progressIncrementer();\n    for (const category of categories) {\n      const taskCards = TaskCard.filterTasks(taskMap.get(category) ?? []);\n      for (const card of taskCards) {\n        for (const task of card.tasks) {\n          let title = `${category}: ${task.name}`;\n          octokit.issues.create({\n            owner: repoOwner,\n            repo: repoName,\n            title: title,\n            body: task.details\n          }).then(() => {\n            console.log(\"Issue creation succeded\", title);\n          }).catch((reason) => {\n            console.log(\"Issue creation failed\", reason);\n            setFailureLog([...failureLog, reason]);\n          }).finally(() => {\n            updateProgress();\n          });\n        }\n      }\n    }\n  }\n\n  return (\n    <Dialog\n      hidden={!showForm}\n      onDismiss={() => onClose()}\n      dialogContentProps={dialogContentProps}\n      modalProps={modelProps}\n    >\n      <div>\n        <p>This form will export your survey results to issues on your GitHub repository.</p>\n        <p>Go to the <a href=\"https://github.com/settings/tokens\">token section of GitHub Developer Settings</a> to generate a personal access token.</p>\n      </div>\n      <TextField label=\"Repo owner\" onChange={(_, newValue) => setRepoOwner(newValue ?? \"\")}  />\n      <TextField label=\"Repo name\" onChange={(_, newValue) => setRepoName(newValue ?? \"\")}  />\n      <TextField label=\"Personal access token\" onChange={(_, newValue) => setAuthToken(newValue ?? \"\")}  />\n      {progress > 0 ? (\n        <ProgressIndicator label=\"Creating issues\" description=\"Issues are being created in your Github repository\" percentComplete={progress} />\n      ) : null}\n      {failureLog.map((failure) =>\n        (<div style={{ color: \"red\" }}>[Error] {`${failure}`}</div>)\n      )}\n      <DialogFooter>\n        <PrimaryButton onClick={() => handleGithubExport()} text=\"Export\" />\n        <DefaultButton onClick={() => onClose()} text=\"Cancel\" />\n      </DialogFooter>\n    </Dialog>\n  )\n}\n\nexport default GithubExportForm;"]},"metadata":{},"sourceType":"module"}