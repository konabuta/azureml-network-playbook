{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n// This file defines the types used in the application.\nimport contentData from '../data/content.json';\nimport { ConditionRunner } from 'survey-react';\nimport { surveyModel } from '../App';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction getChoiceFromContent(questionName, choiceValue) {\n  if (questionName == null || choiceValue == null) {\n    return null;\n  }\n\n  const metadata = contentData.questions.find(q => q.name === questionName); // The surveyjs framework sends a boolean value instead of string\n  // for boolean questions, so we need to force it to be a string\n\n  choiceValue = choiceValue.toString();\n\n  if (metadata == null) {\n    console.log(\"Could not find question %s in content.json\", questionName);\n    return null;\n  }\n\n  if (metadata.choices == null) {\n    console.log(\"Missing choices array for question %s\", questionName);\n    return null;\n  }\n\n  return metadata.choices.find(c => c.name === choiceValue);\n}\n\nexport class TaskCard {\n  constructor(title, message, question, tasks) {\n    this.title = void 0;\n    this.message = void 0;\n    this.question = void 0;\n    this.id = void 0;\n    this.tasks = void 0;\n    this.title = title;\n    this.message = message;\n    this.tasks = tasks;\n    this.question = question;\n    this.id = uuidv4();\n  }\n\n  static fromQuestionChoice(questionName, choiceValue) {\n    const choice = getChoiceFromContent(questionName, choiceValue);\n\n    if (choice == null || choice.taskCard == null || choice.taskCard.tasks == null) {\n      console.debug(\"Null taskcard for question %s choice %s\", questionName, choiceValue);\n      return null;\n    }\n\n    const tasks = choice.taskCard.tasks.map(task => {\n      return new Task(task.name, task.details, task.visibleIf);\n    });\n    return new TaskCard(choice.taskCard.title, choice.taskCard.message, questionName, tasks);\n  }\n\n  static filterTasks(taskCards) {\n    if (surveyModel) {\n      const values = surveyModel.getAllValues();\n      const properties = surveyModel.getFilteredProperties();\n      const filteredCards = [];\n      taskCards.forEach(tc => {\n        const filtered = tc.tasks.filter(task => {\n          var _task$visibleIf;\n\n          return new ConditionRunner((_task$visibleIf = task.visibleIf) !== null && _task$visibleIf !== void 0 ? _task$visibleIf : \"true\").run(values, properties);\n        });\n        filteredCards.push(new TaskCard(tc.title, tc.message, tc.question, filtered));\n      });\n      return filteredCards;\n    } else {\n      return taskCards;\n    }\n  }\n\n}\nexport class Task {\n  constructor(name, details, visibleIf) {\n    this.name = void 0;\n    this.details = void 0;\n    this.visibleIf = void 0;\n    this.id = void 0;\n    this.name = name;\n    this.details = details;\n    this.visibleIf = visibleIf;\n    this.id = uuidv4();\n  }\n\n}","map":{"version":3,"sources":["/Users/keonabut/code/azureml-network-playbook/src/models/Types.ts"],"names":["contentData","ConditionRunner","surveyModel","v4","uuidv4","getChoiceFromContent","questionName","choiceValue","metadata","questions","find","q","name","toString","console","log","choices","c","TaskCard","constructor","title","message","question","tasks","id","fromQuestionChoice","choice","taskCard","debug","map","task","Task","details","visibleIf","filterTasks","taskCards","values","getAllValues","properties","getFilteredProperties","filteredCards","forEach","tc","filtered","filter","run","push"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// This file defines the types used in the application.\n\nimport contentData from '../data/content.json';\nimport { ConditionRunner } from 'survey-react'\nimport { surveyModel } from '../App'\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction getChoiceFromContent(questionName: string, choiceValue: string) {\n    if  (questionName == null || choiceValue == null) {\n      return null;\n    }\n    const metadata: any = contentData.questions.find((q: any) => q.name === questionName);\n    // The surveyjs framework sends a boolean value instead of string\n    // for boolean questions, so we need to force it to be a string\n    choiceValue = choiceValue.toString();\n    \n    if (metadata == null) {\n      console.log(\"Could not find question %s in content.json\", questionName);\n      return null;\n    }\n\n    if (metadata.choices == null) {\n      console.log(\"Missing choices array for question %s\", questionName);\n      return null;\n    }\n\n    return metadata.choices.find((c: any) => c.name === choiceValue);\n}\n\nexport class TaskCard {\n  title: string;\n  message: string;\n  question: string;\n  id: string;\n  tasks: Task[];\n\n  constructor(title: string, message: string, question: string, tasks: Task[]) {\n    this.title = title;\n    this.message = message;\n    this.tasks = tasks;\n    this.question = question;\n    this.id = uuidv4();\n  }\n\n  static fromQuestionChoice(questionName: string, choiceValue: string) {\n    const choice = getChoiceFromContent(questionName, choiceValue);\n    if (choice == null || choice.taskCard == null || choice.taskCard.tasks == null) {\n      console.debug(\"Null taskcard for question %s choice %s\", questionName, choiceValue);\n      return null;\n    }\n\n    const tasks = choice.taskCard.tasks.map((task: any) => { return new Task(task.name, task.details, task.visibleIf) });\n    return new TaskCard(choice.taskCard.title, choice.taskCard.message, questionName, tasks);\n  }\n\n  static filterTasks(taskCards: TaskCard[]) {\n    if (surveyModel) {\n      const values = surveyModel.getAllValues();\n      const properties = surveyModel.getFilteredProperties();\n      const filteredCards: TaskCard[] = [];\n      taskCards.forEach(tc => {\n        const filtered = tc.tasks.filter(task => new ConditionRunner(task.visibleIf ?? \"true\").run(values, properties))\n        filteredCards.push(new TaskCard(tc.title, tc.message, tc.question, filtered));\n      })\n      return filteredCards;\n    } else {\n      return taskCards;\n    }\n  }\n}\n\nexport class Task {\n  name: string;\n  details: string;\n  visibleIf: string;\n  id: string;\n\n  constructor(name: string, details: string, visibleIf: string) {\n    this.name = name;\n    this.details = details;\n    this.visibleIf = visibleIf;\n    this.id = uuidv4();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}