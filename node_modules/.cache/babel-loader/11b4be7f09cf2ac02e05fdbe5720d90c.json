{"ast":null,"code":"import _slicedToArray from\"/home/runner/work/azureml-network-playbook/azureml-network-playbook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport*as React from'react';import{useState}from'react';import{Dialog,DialogType,DialogFooter}from'@fluentui/react/lib/Dialog';import{PrimaryButton,DefaultButton}from'@fluentui/react/lib/Button';import{ChoiceGroup}from'@fluentui/react/lib/ChoiceGroup';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var options=[{key:'CSV',text:'CSV'},{key:'Github',text:'Github'},{key:'PDF',text:'PDF'},{key:'link',text:'Shareable link'}];var modelProps={isBlocking:false,styles:{main:{maxWidth:450}}};var dialogContentProps={type:DialogType.largeHeader,title:'Export to'};var ExportDialog=function ExportDialog(_ref){var show=_ref.show,onClose=_ref.onClose,onCsvExport=_ref.onCsvExport,onGithubExport=_ref.onGithubExport,onPdfExport=_ref.onPdfExport,onLinkExport=_ref.onLinkExport;var _useState=useState(\"link\"),_useState2=_slicedToArray(_useState,2),selectedKey=_useState2[0],setSelectedKey=_useState2[1];var onChange=React.useCallback(function(ev,option){if(option){setSelectedKey(option.key);}},[]);function doExport(){onClose();if(selectedKey===\"CSV\"){onCsvExport();}else if(selectedKey===\"Github\"){onGithubExport();}else if(selectedKey===\"PDF\"){// This is timing sensitive - the page needs to re-render before we print it\n// to avoid printing the export dialog window\nsetTimeout(onPdfExport,250);}else if(selectedKey===\"link\"){onLinkExport();}else{console.error(\"Export - unknown selection\");}}return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(Dialog,{hidden:!show,onDismiss:function onDismiss(){return onClose();},dialogContentProps:dialogContentProps,modalProps:modelProps,children:[/*#__PURE__*/_jsx(ChoiceGroup,{selectedKey:selectedKey,options:options,onChange:onChange}),/*#__PURE__*/_jsxs(DialogFooter,{children:[/*#__PURE__*/_jsx(PrimaryButton,{onClick:function onClick(){return doExport();},text:\"Confirm\"}),/*#__PURE__*/_jsx(DefaultButton,{onClick:function onClick(){return onClose();},text:\"Cancel\"})]})]})});};export default ExportDialog;","map":{"version":3,"sources":["/home/runner/work/azureml-network-playbook/azureml-network-playbook/src/components/ExportDialog.tsx"],"names":["React","useState","Dialog","DialogType","DialogFooter","PrimaryButton","DefaultButton","ChoiceGroup","options","key","text","modelProps","isBlocking","styles","main","maxWidth","dialogContentProps","type","largeHeader","title","ExportDialog","show","onClose","onCsvExport","onGithubExport","onPdfExport","onLinkExport","selectedKey","setSelectedKey","onChange","useCallback","ev","option","doExport","setTimeout","console","error"],"mappings":"0LAAA;AACA;AAEA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,QAAT,KAAyB,OAAzB,CACA,OAASC,MAAT,CAAiBC,UAAjB,CAA6BC,YAA7B,KAAiD,4BAAjD,CACA,OAASC,aAAT,CAAwBC,aAAxB,KAA6C,4BAA7C,CACA,OAASC,WAAT,KAAgD,iCAAhD,C,6IAEA,GAAMC,CAAAA,OAAO,CAAG,CACd,CACEC,GAAG,CAAE,KADP,CAEEC,IAAI,CAAE,KAFR,CADc,CAKd,CACED,GAAG,CAAE,QADP,CAEEC,IAAI,CAAE,QAFR,CALc,CASd,CACED,GAAG,CAAE,KADP,CAEEC,IAAI,CAAE,KAFR,CATc,CAad,CACED,GAAG,CAAE,MADP,CAEEC,IAAI,CAAE,gBAFR,CAbc,CAAhB,CAkBA,GAAMC,CAAAA,UAAU,CAAG,CACjBC,UAAU,CAAE,KADK,CAEjBC,MAAM,CAAE,CAAEC,IAAI,CAAE,CAAEC,QAAQ,CAAE,GAAZ,CAAR,CAFS,CAAnB,CAIA,GAAMC,CAAAA,kBAAkB,CAAG,CACzBC,IAAI,CAAEd,UAAU,CAACe,WADQ,CAEzBC,KAAK,CAAE,WAFkB,CAA3B,CAcA,GAAMC,CAAAA,YAAwD,CAAG,QAA3DA,CAAAA,YAA2D,MAA+E,IAA5EC,CAAAA,IAA4E,MAA5EA,IAA4E,CAAtEC,OAAsE,MAAtEA,OAAsE,CAA7DC,WAA6D,MAA7DA,WAA6D,CAAhDC,cAAgD,MAAhDA,cAAgD,CAAhCC,WAAgC,MAAhCA,WAAgC,CAAnBC,YAAmB,MAAnBA,YAAmB,CAC9I,cAAsCzB,QAAQ,CAAC,MAAD,CAA9C,wCAAO0B,WAAP,eAAoBC,cAApB,eAEA,GAAMC,CAAAA,QAAQ,CAAG7B,KAAK,CAAC8B,WAAN,CAAkB,SAACC,EAAD,CAAoDC,MAApD,CAA+F,CAChI,GAAIA,MAAJ,CAAY,CACVJ,cAAc,CAACI,MAAM,CAACvB,GAAR,CAAd,CACD,CACF,CAJgB,CAId,EAJc,CAAjB,CAMA,QAASwB,CAAAA,QAAT,EAAoB,CAClBX,OAAO,GACP,GAAIK,WAAW,GAAK,KAApB,CAA2B,CACzBJ,WAAW,GACZ,CAFD,IAEO,IAAII,WAAW,GAAK,QAApB,CAA8B,CACnCH,cAAc,GACf,CAFM,IAEA,IAAIG,WAAW,GAAK,KAApB,CAA2B,CAChC;AACA;AACAO,UAAU,CAACT,WAAD,CAAc,GAAd,CAAV,CACD,CAJM,IAIA,IAAIE,WAAW,GAAK,MAApB,CAA4B,CACjCD,YAAY,GACb,CAFM,IAEA,CACLS,OAAO,CAACC,KAAR,CAAc,4BAAd,EACD,CACF,CAED,mBACE,sCACE,MAAC,MAAD,EACE,MAAM,CAAE,CAACf,IADX,CAEE,SAAS,CAAE,2BAAMC,CAAAA,OAAO,EAAb,EAFb,CAGE,kBAAkB,CAAEN,kBAHtB,CAIE,UAAU,CAAEL,UAJd,wBAME,KAAC,WAAD,EAAa,WAAW,CAAEgB,WAA1B,CAAuC,OAAO,CAAEnB,OAAhD,CAAyD,QAAQ,CAAEqB,QAAnE,EANF,cAOE,MAAC,YAAD,yBACE,KAAC,aAAD,EAAe,OAAO,CAAE,yBAAMI,CAAAA,QAAQ,EAAd,EAAxB,CAA0C,IAAI,CAAC,SAA/C,EADF,cAEE,KAAC,aAAD,EAAe,OAAO,CAAE,yBAAMX,CAAAA,OAAO,EAAb,EAAxB,CAAyC,IAAI,CAAC,QAA9C,EAFF,GAPF,GADF,EADF,CAgBD,CA1CD,CA4CA,cAAeF,CAAAA,YAAf","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';\nimport { PrimaryButton, DefaultButton } from '@fluentui/react/lib/Button';\nimport { ChoiceGroup, IChoiceGroupOption } from '@fluentui/react/lib/ChoiceGroup';\n\nconst options = [\n  {\n    key: 'CSV',\n    text: 'CSV',\n  },\n  {\n    key: 'Github',\n    text: 'Github',\n  },\n  {\n    key: 'PDF',\n    text: 'PDF',\n  },\n  {\n    key: 'link',\n    text: 'Shareable link'\n  }\n];\nconst modelProps = {\n  isBlocking: false,\n  styles: { main: { maxWidth: 450 } },\n};\nconst dialogContentProps = {\n  type: DialogType.largeHeader,\n  title: 'Export to',\n};\n\ninterface ExportDialogProps {\n  show: boolean,\n  onClose: Function,\n  onCsvExport: Function,\n  onGithubExport: Function,\n  onPdfExport: Function,\n  onLinkExport: Function\n}\n\nconst ExportDialog: React.FunctionComponent<ExportDialogProps> = ({ show, onClose, onCsvExport, onGithubExport, onPdfExport, onLinkExport }) => {\n  const [selectedKey, setSelectedKey] = useState(\"link\");\n\n  const onChange = React.useCallback((ev: React.SyntheticEvent<HTMLElement> | undefined, option: IChoiceGroupOption | undefined) => {\n    if (option) {\n      setSelectedKey(option.key);\n    }\n  }, []);\n\n  function doExport() {\n    onClose();\n    if (selectedKey === \"CSV\") {\n      onCsvExport();\n    } else if (selectedKey === \"Github\") {\n      onGithubExport();\n    } else if (selectedKey === \"PDF\") {\n      // This is timing sensitive - the page needs to re-render before we print it\n      // to avoid printing the export dialog window\n      setTimeout(onPdfExport, 250);\n    } else if (selectedKey === \"link\") {\n      onLinkExport();\n    } else {\n      console.error(\"Export - unknown selection\");\n    }\n  }\n\n  return (\n    <>\n      <Dialog\n        hidden={!show}\n        onDismiss={() => onClose()}\n        dialogContentProps={dialogContentProps}\n        modalProps={modelProps}\n      >\n        <ChoiceGroup selectedKey={selectedKey} options={options} onChange={onChange} />\n        <DialogFooter>\n          <PrimaryButton onClick={() => doExport()} text=\"Confirm\" />\n          <DefaultButton onClick={() => onClose()} text=\"Cancel\" />\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nexport default ExportDialog;"]},"metadata":{},"sourceType":"module"}