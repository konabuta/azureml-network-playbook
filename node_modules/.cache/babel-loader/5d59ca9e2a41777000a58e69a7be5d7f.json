{"ast":null,"code":"import _classCallCheck from\"/home/runner/work/azureml-network-playbook/azureml-network-playbook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/runner/work/azureml-network-playbook/azureml-network-playbook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n// This file defines the types used in the application.\nimport contentData from'../data/content.json';import{ConditionRunner}from'survey-react';import{surveyModel}from'../App';import{v4 as uuidv4}from'uuid';function getChoiceFromContent(questionName,choiceValue){if(questionName==null||choiceValue==null){return null;}var metadata=contentData.questions.find(function(q){return q.name===questionName;});// The surveyjs framework sends a boolean value instead of string\n// for boolean questions, so we need to force it to be a string\nchoiceValue=choiceValue.toString();if(metadata==null){console.log(\"Could not find question %s in content.json\",questionName);return null;}if(metadata.choices==null){console.log(\"Missing choices array for question %s\",questionName);return null;}return metadata.choices.find(function(c){return c.name===choiceValue;});}export var TaskCard=/*#__PURE__*/function(){function TaskCard(title,message,question,tasks){_classCallCheck(this,TaskCard);this.title=void 0;this.message=void 0;this.question=void 0;this.id=void 0;this.tasks=void 0;this.title=title;this.message=message;this.tasks=tasks;this.question=question;this.id=uuidv4();}_createClass(TaskCard,null,[{key:\"fromQuestionChoice\",value:function fromQuestionChoice(questionName,choiceValue){var choice=getChoiceFromContent(questionName,choiceValue);if(choice==null||choice.taskCard==null||choice.taskCard.tasks==null){console.debug(\"Null taskcard for question %s choice %s\",questionName,choiceValue);return null;}var tasks=choice.taskCard.tasks.map(function(task){return new Task(task.name,task.details,task.visibleIf);});return new TaskCard(choice.taskCard.title,choice.taskCard.message,questionName,tasks);}},{key:\"filterTasks\",value:function filterTasks(taskCards){if(surveyModel){var values=surveyModel.getAllValues();var properties=surveyModel.getFilteredProperties();var filteredCards=[];taskCards.forEach(function(tc){var filtered=tc.tasks.filter(function(task){var _task$visibleIf;return new ConditionRunner((_task$visibleIf=task.visibleIf)!==null&&_task$visibleIf!==void 0?_task$visibleIf:\"true\").run(values,properties);});filteredCards.push(new TaskCard(tc.title,tc.message,tc.question,filtered));});return filteredCards;}else{return taskCards;}}}]);return TaskCard;}();export var Task=function Task(name,details,visibleIf){_classCallCheck(this,Task);this.name=void 0;this.details=void 0;this.visibleIf=void 0;this.id=void 0;this.name=name;this.details=details;this.visibleIf=visibleIf;this.id=uuidv4();};","map":{"version":3,"sources":["/home/runner/work/azureml-network-playbook/azureml-network-playbook/src/models/Types.ts"],"names":["contentData","ConditionRunner","surveyModel","v4","uuidv4","getChoiceFromContent","questionName","choiceValue","metadata","questions","find","q","name","toString","console","log","choices","c","TaskCard","title","message","question","tasks","id","choice","taskCard","debug","map","task","Task","details","visibleIf","taskCards","values","getAllValues","properties","getFilteredProperties","filteredCards","forEach","tc","filtered","filter","run","push"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// This file defines the types used in the application.\n\nimport contentData from '../data/content.json';\nimport { ConditionRunner } from 'survey-react'\nimport { surveyModel } from '../App'\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction getChoiceFromContent(questionName: string, choiceValue: string) {\n    if  (questionName == null || choiceValue == null) {\n      return null;\n    }\n    const metadata: any = contentData.questions.find((q: any) => q.name === questionName);\n    // The surveyjs framework sends a boolean value instead of string\n    // for boolean questions, so we need to force it to be a string\n    choiceValue = choiceValue.toString();\n    \n    if (metadata == null) {\n      console.log(\"Could not find question %s in content.json\", questionName);\n      return null;\n    }\n\n    if (metadata.choices == null) {\n      console.log(\"Missing choices array for question %s\", questionName);\n      return null;\n    }\n\n    return metadata.choices.find((c: any) => c.name === choiceValue);\n}\n\nexport class TaskCard {\n  title: string;\n  message: string;\n  question: string;\n  id: string;\n  tasks: Task[];\n\n  constructor(title: string, message: string, question: string, tasks: Task[]) {\n    this.title = title;\n    this.message = message;\n    this.tasks = tasks;\n    this.question = question;\n    this.id = uuidv4();\n  }\n\n  static fromQuestionChoice(questionName: string, choiceValue: string) {\n    const choice = getChoiceFromContent(questionName, choiceValue);\n    if (choice == null || choice.taskCard == null || choice.taskCard.tasks == null) {\n      console.debug(\"Null taskcard for question %s choice %s\", questionName, choiceValue);\n      return null;\n    }\n\n    const tasks = choice.taskCard.tasks.map((task: any) => { return new Task(task.name, task.details, task.visibleIf) });\n    return new TaskCard(choice.taskCard.title, choice.taskCard.message, questionName, tasks);\n  }\n\n  static filterTasks(taskCards: TaskCard[]) {\n    if (surveyModel) {\n      const values = surveyModel.getAllValues();\n      const properties = surveyModel.getFilteredProperties();\n      const filteredCards: TaskCard[] = [];\n      taskCards.forEach(tc => {\n        const filtered = tc.tasks.filter(task => new ConditionRunner(task.visibleIf ?? \"true\").run(values, properties))\n        filteredCards.push(new TaskCard(tc.title, tc.message, tc.question, filtered));\n      })\n      return filteredCards;\n    } else {\n      return taskCards;\n    }\n  }\n}\n\nexport class Task {\n  name: string;\n  details: string;\n  visibleIf: string;\n  id: string;\n\n  constructor(name: string, details: string, visibleIf: string) {\n    this.name = name;\n    this.details = details;\n    this.visibleIf = visibleIf;\n    this.id = uuidv4();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}