{"ast":null,"code":"var _jsxFileName = \"/Users/keonabut/code/azureml-network-playbook/src/components/ExportDialog.tsx\",\n    _s = $RefreshSig$();\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';\nimport { PrimaryButton, DefaultButton } from '@fluentui/react/lib/Button';\nimport { ChoiceGroup } from '@fluentui/react/lib/ChoiceGroup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst options = [{\n  key: 'CSV',\n  text: 'CSV'\n}, {\n  key: 'Github',\n  text: 'Github'\n}, {\n  key: 'PDF',\n  text: 'PDF'\n}, {\n  key: 'link',\n  text: 'Shareable link'\n}];\nconst modelProps = {\n  isBlocking: false,\n  styles: {\n    main: {\n      maxWidth: 450\n    }\n  }\n};\nconst dialogContentProps = {\n  type: DialogType.largeHeader,\n  title: 'Export to'\n};\n\nconst ExportDialog = ({\n  show,\n  onClose,\n  onCsvExport,\n  onGithubExport,\n  onPdfExport,\n  onLinkExport\n}) => {\n  _s();\n\n  const [selectedKey, setSelectedKey] = useState(\"link\");\n  const onChange = React.useCallback((ev, option) => {\n    if (option) {\n      setSelectedKey(option.key);\n    }\n  }, []);\n\n  function doExport() {\n    onClose();\n\n    if (selectedKey === \"CSV\") {\n      onCsvExport();\n    } else if (selectedKey === \"Github\") {\n      onGithubExport();\n    } else if (selectedKey === \"PDF\") {\n      // This is timing sensitive - the page needs to re-render before we print it\n      // to avoid printing the export dialog window\n      setTimeout(onPdfExport, 250);\n    } else if (selectedKey === \"link\") {\n      onLinkExport();\n    } else {\n      console.error(\"Export - unknown selection\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Dialog, {\n      hidden: !show,\n      onDismiss: () => onClose(),\n      dialogContentProps: dialogContentProps,\n      modalProps: modelProps,\n      children: [/*#__PURE__*/_jsxDEV(ChoiceGroup, {\n        selectedKey: selectedKey,\n        options: options,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogFooter, {\n        children: [/*#__PURE__*/_jsxDEV(PrimaryButton, {\n          onClick: () => doExport(),\n          text: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DefaultButton, {\n          onClick: () => onClose(),\n          text: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(ExportDialog, \"CSmcgRSxE76CMMKAkqNxgwQT+Ck=\");\n\n_c = ExportDialog;\nexport default ExportDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExportDialog\");","map":{"version":3,"sources":["/Users/keonabut/code/azureml-network-playbook/src/components/ExportDialog.tsx"],"names":["React","useState","Dialog","DialogType","DialogFooter","PrimaryButton","DefaultButton","ChoiceGroup","options","key","text","modelProps","isBlocking","styles","main","maxWidth","dialogContentProps","type","largeHeader","title","ExportDialog","show","onClose","onCsvExport","onGithubExport","onPdfExport","onLinkExport","selectedKey","setSelectedKey","onChange","useCallback","ev","option","doExport","setTimeout","console","error"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';\nimport { PrimaryButton, DefaultButton } from '@fluentui/react/lib/Button';\nimport { ChoiceGroup, IChoiceGroupOption } from '@fluentui/react/lib/ChoiceGroup';\n\nconst options = [\n  {\n    key: 'CSV',\n    text: 'CSV',\n  },\n  {\n    key: 'Github',\n    text: 'Github',\n  },\n  {\n    key: 'PDF',\n    text: 'PDF',\n  },\n  {\n    key: 'link',\n    text: 'Shareable link'\n  }\n];\nconst modelProps = {\n  isBlocking: false,\n  styles: { main: { maxWidth: 450 } },\n};\nconst dialogContentProps = {\n  type: DialogType.largeHeader,\n  title: 'Export to',\n};\n\ninterface ExportDialogProps {\n  show: boolean,\n  onClose: Function,\n  onCsvExport: Function,\n  onGithubExport: Function,\n  onPdfExport: Function,\n  onLinkExport: Function\n}\n\nconst ExportDialog: React.FunctionComponent<ExportDialogProps> = ({ show, onClose, onCsvExport, onGithubExport, onPdfExport, onLinkExport }) => {\n  const [selectedKey, setSelectedKey] = useState(\"link\");\n\n  const onChange = React.useCallback((ev: React.SyntheticEvent<HTMLElement> | undefined, option: IChoiceGroupOption | undefined) => {\n    if (option) {\n      setSelectedKey(option.key);\n    }\n  }, []);\n\n  function doExport() {\n    onClose();\n    if (selectedKey === \"CSV\") {\n      onCsvExport();\n    } else if (selectedKey === \"Github\") {\n      onGithubExport();\n    } else if (selectedKey === \"PDF\") {\n      // This is timing sensitive - the page needs to re-render before we print it\n      // to avoid printing the export dialog window\n      setTimeout(onPdfExport, 250);\n    } else if (selectedKey === \"link\") {\n      onLinkExport();\n    } else {\n      console.error(\"Export - unknown selection\");\n    }\n  }\n\n  return (\n    <>\n      <Dialog\n        hidden={!show}\n        onDismiss={() => onClose()}\n        dialogContentProps={dialogContentProps}\n        modalProps={modelProps}\n      >\n        <ChoiceGroup selectedKey={selectedKey} options={options} onChange={onChange} />\n        <DialogFooter>\n          <PrimaryButton onClick={() => doExport()} text=\"Confirm\" />\n          <DefaultButton onClick={() => onClose()} text=\"Cancel\" />\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nexport default ExportDialog;"]},"metadata":{},"sourceType":"module"}