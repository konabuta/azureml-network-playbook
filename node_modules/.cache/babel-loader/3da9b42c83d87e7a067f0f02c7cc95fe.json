{"ast":null,"code":"var _jsxFileName = \"/Users/keonabut/code/azureml-network-playbook/src/components/CollapsibleSection.tsx\",\n    _s = $RefreshSig$();\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport React, { useState } from 'react';\nimport { TaskCard } from '../models/Types';\nimport TaskCardComponent from './TaskCardComponent';\nimport { BsFillCaretRightFill, BsFillCaretDownFill } from 'react-icons/bs';\nimport { getCategorySectionId } from '../util/Utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CollapsibleSection = ({\n  taskMap,\n  category,\n  isHighContrast\n}) => {\n  _s();\n\n  var _taskMap$get, _tasks$map$reduce;\n\n  const [isExpanded, setExpanded] = useState(true);\n  const tasks = TaskCard.filterTasks((_taskMap$get = taskMap.get(category)) !== null && _taskMap$get !== void 0 ? _taskMap$get : []);\n  const numTasks = (_tasks$map$reduce = tasks.map(task => task.tasks.length).reduce((prev, n) => prev + n)) !== null && _tasks$map$reduce !== void 0 ? _tasks$map$reduce : 0;\n  const hasMessage = tasks.find(tc => !!tc.message) != null;\n  const highContrastBorder = isHighContrast ? \"solid white 1px\" : \"\";\n  const highContrastColor = isHighContrast ? \"#FFFFFF\" : \"#000000\"; // If there are no tasks and there's no message for the category, then render nothing\n\n  return numTasks > 0 || hasMessage ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: getCategorySectionId(category),\n      className: \"scenario-bar my-3\",\n      \"aria-label\": `Expand or collapse ${category} section`,\n      onClick: () => setExpanded(!isExpanded),\n      style: {\n        border: highContrastBorder\n      },\n      children: [isExpanded ? /*#__PURE__*/_jsxDEV(BsFillCaretDownFill, {\n        \"aria-label\": \"down arrow\",\n        color: highContrastColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(BsFillCaretRightFill, {\n        \"aria-label\": \"right arrow\",\n        color: highContrastColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 98\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"scenario-bar-text\",\n        children: category\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), isExpanded ? tasks.map(tc => /*#__PURE__*/_jsxDEV(TaskCardComponent, {\n      card: tc,\n      isHighContrast: isHighContrast\n    }, tc.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 37\n    }, this)) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this) : null;\n};\n\n_s(CollapsibleSection, \"rMt95KXb2l6k0ObzsZQDwTQHU0U=\");\n\n_c = CollapsibleSection;\nexport default CollapsibleSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"CollapsibleSection\");","map":{"version":3,"sources":["/Users/keonabut/code/azureml-network-playbook/src/components/CollapsibleSection.tsx"],"names":["React","useState","TaskCard","TaskCardComponent","BsFillCaretRightFill","BsFillCaretDownFill","getCategorySectionId","CollapsibleSection","taskMap","category","isHighContrast","isExpanded","setExpanded","tasks","filterTasks","get","numTasks","map","task","length","reduce","prev","n","hasMessage","find","tc","message","highContrastBorder","highContrastColor","border","id"],"mappings":";;;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,oBAAT,EAA+BC,mBAA/B,QAA0D,gBAA1D;AACA,SAASC,oBAAT,QAAqC,eAArC;;;AAQA,MAAMC,kBAAoE,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,QAAX;AAAqBC,EAAAA;AAArB,CAAD,KAA2C;AAAA;;AAAA;;AACtH,QAAM,CAACC,UAAD,EAAaC,WAAb,IAA4BX,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAMY,KAAK,GAAGX,QAAQ,CAACY,WAAT,iBAAqBN,OAAO,CAACO,GAAR,CAAYN,QAAZ,CAArB,uDAA8C,EAA9C,CAAd;AACA,QAAMO,QAAQ,wBAAGH,KAAK,CAACI,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACL,KAAL,CAAWM,MAA7B,EAAqCC,MAArC,CAA4C,CAACC,IAAD,EAAOC,CAAP,KAAaD,IAAI,GAAGC,CAAhE,CAAH,iEAAyE,CAAvF;AACA,QAAMC,UAAU,GAAGV,KAAK,CAACW,IAAN,CAAWC,EAAE,IAAI,CAAC,CAACA,EAAE,CAACC,OAAtB,KAAkC,IAArD;AACA,QAAMC,kBAAkB,GAAGjB,cAAc,GAAG,iBAAH,GAAuB,EAAhE;AACA,QAAMkB,iBAAiB,GAAGlB,cAAc,GAAG,SAAH,GAAe,SAAvD,CANsH,CAOtH;;AACA,SAAQM,QAAQ,GAAG,CAAX,IAAgBO,UAAjB,gBACL,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE;AAAQ,MAAA,EAAE,EAAEjB,oBAAoB,CAACG,QAAD,CAAhC;AAA4C,MAAA,SAAS,EAAC,mBAAtD;AAA0E,oBAAa,sBAAqBA,QAAS,UAArH;AAAgI,MAAA,OAAO,EAAE,MAAMG,WAAW,CAAC,CAACD,UAAF,CAA1J;AAAyK,MAAA,KAAK,EAAE;AAACkB,QAAAA,MAAM,EAAEF;AAAT,OAAhL;AAAA,iBACGhB,UAAU,gBAAG,QAAC,mBAAD;AAAqB,sBAAW,YAAhC;AAA6C,QAAA,KAAK,EAAEiB;AAApD;AAAA;AAAA;AAAA;AAAA,cAAH,gBAA8E,QAAC,oBAAD;AAAsB,sBAAW,aAAjC;AAA+C,QAAA,KAAK,EAAEA;AAAtD;AAAA;AAAA;AAAA;AAAA,cAD3F,eAEE;AAAI,QAAA,SAAS,EAAC,mBAAd;AAAA,kBAAmCnB;AAAnC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAKGE,UAAU,GAAGE,KAAK,CAACI,GAAN,CAAUQ,EAAE,iBAAI,QAAC,iBAAD;AAA+B,MAAA,IAAI,EAAEA,EAArC;AAAyC,MAAA,cAAc,EAAEf;AAAzD,OAAwBe,EAAE,CAACK,EAA3B;AAAA;AAAA;AAAA;AAAA,YAAhB,CAAH,GAAiG,IAL9G;AAAA;AAAA;AAAA;AAAA;AAAA,UADK,GAQH,IARJ;AASD,CAjBD;;GAAMvB,kB;;KAAAA,kB;AAmBN,eAAeA,kBAAf","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport React, { useState } from 'react';\nimport { TaskCard } from '../models/Types';\nimport TaskCardComponent from './TaskCardComponent';\nimport { BsFillCaretRightFill, BsFillCaretDownFill } from 'react-icons/bs';\nimport { getCategorySectionId } from '../util/Utils'\n\ninterface CollapsibleSectionProps {\n  taskMap: Map<string, TaskCard[]>,\n  category: string,\n  isHighContrast: boolean\n}\n\nconst CollapsibleSection: React.FunctionComponent<CollapsibleSectionProps> = ({ taskMap, category, isHighContrast }) => {\n  const [isExpanded, setExpanded] = useState(true);\n  const tasks = TaskCard.filterTasks(taskMap.get(category) ?? []);\n  const numTasks = tasks.map(task => task.tasks.length).reduce((prev, n) => prev + n) ?? 0;\n  const hasMessage = tasks.find(tc => !!tc.message) != null;\n  const highContrastBorder = isHighContrast ? \"solid white 1px\" : \"\";\n  const highContrastColor = isHighContrast ? \"#FFFFFF\" : \"#000000\";\n  // If there are no tasks and there's no message for the category, then render nothing\n  return (numTasks > 0 || hasMessage) ? (\n    <React.Fragment>\n      <button id={getCategorySectionId(category)} className=\"scenario-bar my-3\" aria-label={`Expand or collapse ${category} section`} onClick={() => setExpanded(!isExpanded)} style={{border: highContrastBorder}}>\n        {isExpanded ? <BsFillCaretDownFill aria-label=\"down arrow\" color={highContrastColor}/> : <BsFillCaretRightFill aria-label=\"right arrow\" color={highContrastColor}/>}\n        <h4 className=\"scenario-bar-text\">{category}</h4>\n      </button>\n      {isExpanded ? tasks.map(tc => <TaskCardComponent key={tc.id} card={tc} isHighContrast={isHighContrast}/>) : null}\n    </React.Fragment>\n  ) : null;\n}\n\nexport default CollapsibleSection;"]},"metadata":{},"sourceType":"module"}