{"ast":null,"code":"import _slicedToArray from\"/home/runner/work/azureml-network-playbook/azureml-network-playbook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport React,{useState}from'react';import{TaskCard}from'../models/Types';import TaskCardComponent from'./TaskCardComponent';import{BsFillCaretRightFill,BsFillCaretDownFill}from'react-icons/bs';import{getCategorySectionId}from'../util/Utils';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CollapsibleSection=function CollapsibleSection(_ref){var _taskMap$get,_tasks$map$reduce;var taskMap=_ref.taskMap,category=_ref.category,isHighContrast=_ref.isHighContrast;var _useState=useState(true),_useState2=_slicedToArray(_useState,2),isExpanded=_useState2[0],setExpanded=_useState2[1];var tasks=TaskCard.filterTasks((_taskMap$get=taskMap.get(category))!==null&&_taskMap$get!==void 0?_taskMap$get:[]);var numTasks=(_tasks$map$reduce=tasks.map(function(task){return task.tasks.length;}).reduce(function(prev,n){return prev+n;}))!==null&&_tasks$map$reduce!==void 0?_tasks$map$reduce:0;var hasMessage=tasks.find(function(tc){return!!tc.message;})!=null;var highContrastBorder=isHighContrast?\"solid white 1px\":\"\";var highContrastColor=isHighContrast?\"#FFFFFF\":\"#000000\";// If there are no tasks and there's no message for the category, then render nothing\nreturn numTasks>0||hasMessage?/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsxs(\"button\",{id:getCategorySectionId(category),className:\"scenario-bar my-3\",\"aria-label\":\"Expand or collapse \".concat(category,\" section\"),onClick:function onClick(){return setExpanded(!isExpanded);},style:{border:highContrastBorder},children:[isExpanded?/*#__PURE__*/_jsx(BsFillCaretDownFill,{\"aria-label\":\"down arrow\",color:highContrastColor}):/*#__PURE__*/_jsx(BsFillCaretRightFill,{\"aria-label\":\"right arrow\",color:highContrastColor}),/*#__PURE__*/_jsx(\"h4\",{className:\"scenario-bar-text\",children:category})]}),isExpanded?tasks.map(function(tc){return/*#__PURE__*/_jsx(TaskCardComponent,{card:tc,isHighContrast:isHighContrast},tc.id);}):null]}):null;};export default CollapsibleSection;","map":{"version":3,"sources":["/home/runner/work/azureml-network-playbook/azureml-network-playbook/src/components/CollapsibleSection.tsx"],"names":["React","useState","TaskCard","TaskCardComponent","BsFillCaretRightFill","BsFillCaretDownFill","getCategorySectionId","CollapsibleSection","taskMap","category","isHighContrast","isExpanded","setExpanded","tasks","filterTasks","get","numTasks","map","task","length","reduce","prev","n","hasMessage","find","tc","message","highContrastBorder","highContrastColor","border","id"],"mappings":"0LAAA;AACA;AAEA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,QAAT,KAAyB,iBAAzB,CACA,MAAOC,CAAAA,iBAAP,KAA8B,qBAA9B,CACA,OAASC,oBAAT,CAA+BC,mBAA/B,KAA0D,gBAA1D,CACA,OAASC,oBAAT,KAAqC,eAArC,C,wFAQA,GAAMC,CAAAA,kBAAoE,CAAG,QAAvEA,CAAAA,kBAAuE,MAA2C,uCAAxCC,CAAAA,OAAwC,MAAxCA,OAAwC,CAA/BC,QAA+B,MAA/BA,QAA+B,CAArBC,cAAqB,MAArBA,cAAqB,CACtH,cAAkCT,QAAQ,CAAC,IAAD,CAA1C,wCAAOU,UAAP,eAAmBC,WAAnB,eACA,GAAMC,CAAAA,KAAK,CAAGX,QAAQ,CAACY,WAAT,eAAqBN,OAAO,CAACO,GAAR,CAAYN,QAAZ,CAArB,6CAA8C,EAA9C,CAAd,CACA,GAAMO,CAAAA,QAAQ,oBAAGH,KAAK,CAACI,GAAN,CAAU,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACL,KAAL,CAAWM,MAAf,EAAd,EAAqCC,MAArC,CAA4C,SAACC,IAAD,CAAOC,CAAP,QAAaD,CAAAA,IAAI,CAAGC,CAApB,EAA5C,CAAH,uDAAyE,CAAvF,CACA,GAAMC,CAAAA,UAAU,CAAGV,KAAK,CAACW,IAAN,CAAW,SAAAC,EAAE,QAAI,CAAC,CAACA,EAAE,CAACC,OAAT,EAAb,GAAkC,IAArD,CACA,GAAMC,CAAAA,kBAAkB,CAAGjB,cAAc,CAAG,iBAAH,CAAuB,EAAhE,CACA,GAAMkB,CAAAA,iBAAiB,CAAGlB,cAAc,CAAG,SAAH,CAAe,SAAvD,CACA;AACA,MAAQM,CAAAA,QAAQ,CAAG,CAAX,EAAgBO,UAAjB,cACL,MAAC,KAAD,CAAO,QAAP,yBACE,gBAAQ,EAAE,CAAEjB,oBAAoB,CAACG,QAAD,CAAhC,CAA4C,SAAS,CAAC,mBAAtD,CAA0E,0CAAkCA,QAAlC,YAA1E,CAAgI,OAAO,CAAE,yBAAMG,CAAAA,WAAW,CAAC,CAACD,UAAF,CAAjB,EAAzI,CAAyK,KAAK,CAAE,CAACkB,MAAM,CAAEF,kBAAT,CAAhL,WACGhB,UAAU,cAAG,KAAC,mBAAD,EAAqB,aAAW,YAAhC,CAA6C,KAAK,CAAEiB,iBAApD,EAAH,cAA8E,KAAC,oBAAD,EAAsB,aAAW,aAAjC,CAA+C,KAAK,CAAEA,iBAAtD,EAD3F,cAEE,WAAI,SAAS,CAAC,mBAAd,UAAmCnB,QAAnC,EAFF,GADF,CAKGE,UAAU,CAAGE,KAAK,CAACI,GAAN,CAAU,SAAAQ,EAAE,qBAAI,KAAC,iBAAD,EAA+B,IAAI,CAAEA,EAArC,CAAyC,cAAc,CAAEf,cAAzD,EAAwBe,EAAE,CAACK,EAA3B,CAAJ,EAAZ,CAAH,CAAiG,IAL9G,GADK,CAQH,IARJ,CASD,CAjBD,CAmBA,cAAevB,CAAAA,kBAAf","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport React, { useState } from 'react';\nimport { TaskCard } from '../models/Types';\nimport TaskCardComponent from './TaskCardComponent';\nimport { BsFillCaretRightFill, BsFillCaretDownFill } from 'react-icons/bs';\nimport { getCategorySectionId } from '../util/Utils'\n\ninterface CollapsibleSectionProps {\n  taskMap: Map<string, TaskCard[]>,\n  category: string,\n  isHighContrast: boolean\n}\n\nconst CollapsibleSection: React.FunctionComponent<CollapsibleSectionProps> = ({ taskMap, category, isHighContrast }) => {\n  const [isExpanded, setExpanded] = useState(true);\n  const tasks = TaskCard.filterTasks(taskMap.get(category) ?? []);\n  const numTasks = tasks.map(task => task.tasks.length).reduce((prev, n) => prev + n) ?? 0;\n  const hasMessage = tasks.find(tc => !!tc.message) != null;\n  const highContrastBorder = isHighContrast ? \"solid white 1px\" : \"\";\n  const highContrastColor = isHighContrast ? \"#FFFFFF\" : \"#000000\";\n  // If there are no tasks and there's no message for the category, then render nothing\n  return (numTasks > 0 || hasMessage) ? (\n    <React.Fragment>\n      <button id={getCategorySectionId(category)} className=\"scenario-bar my-3\" aria-label={`Expand or collapse ${category} section`} onClick={() => setExpanded(!isExpanded)} style={{border: highContrastBorder}}>\n        {isExpanded ? <BsFillCaretDownFill aria-label=\"down arrow\" color={highContrastColor}/> : <BsFillCaretRightFill aria-label=\"right arrow\" color={highContrastColor}/>}\n        <h4 className=\"scenario-bar-text\">{category}</h4>\n      </button>\n      {isExpanded ? tasks.map(tc => <TaskCardComponent key={tc.id} card={tc} isHighContrast={isHighContrast}/>) : null}\n    </React.Fragment>\n  ) : null;\n}\n\nexport default CollapsibleSection;"]},"metadata":{},"sourceType":"module"}