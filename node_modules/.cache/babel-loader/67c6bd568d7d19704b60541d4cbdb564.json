{"ast":null,"code":"var _jsxFileName = \"/Users/keonabut/code/azureml-network-playbook/src/components/CustomRadioGroup.tsx\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { SurveyQuestionRadiogroup } from 'survey-react';\nimport * as React from 'react';\nimport contentData from '../data/content.json';\nimport RadioDefinition from './RadioDefinition';\nimport HelpButton from './HelpButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class CustomRadiogroup extends SurveyQuestionRadiogroup {\n  getItems(cssClasses) {\n    const items = super.getItems(cssClasses);\n    const contentQuestion = contentData.questions.find(q => q.name === this.question.name);\n    const elements = this.question.visibleChoices.map(choice => {\n      const contentChoice = contentQuestion.choices.find(cq => cq.name === choice.value);\n      return contentChoice != null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(HelpButton, {\n          name: choice.text,\n          examples: contentChoice.examples\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(RadioDefinition, {\n          definition: contentChoice.definition\n        }, contentChoice.name + \"__customradiogroup\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : null;\n    });\n    const merged = Array(items.length * 2);\n\n    for (let i = 0; i < items.length * 2; i++) {\n      const index = Math.floor(i / 2);\n      merged[i] = i % 2 === 0 ? items[index] : elements[index];\n    }\n\n    return merged;\n  }\n\n}\nexport default CustomRadiogroup;","map":{"version":3,"sources":["/Users/keonabut/code/azureml-network-playbook/src/components/CustomRadioGroup.tsx"],"names":["SurveyQuestionRadiogroup","React","contentData","RadioDefinition","HelpButton","CustomRadiogroup","getItems","cssClasses","items","contentQuestion","questions","find","q","name","question","elements","visibleChoices","map","choice","contentChoice","choices","cq","value","text","examples","definition","merged","Array","length","i","index","Math","floor"],"mappings":";AAAA;AACA;AAEA,SAASA,wBAAT,QAAyC,cAAzC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AAEA,OAAO,MAAMC,gBAAN,SAA+BL,wBAA/B,CAAwD;AACnDM,EAAAA,QAAQ,CAACC,UAAD,EAA8B;AAC9C,UAAMC,KAAK,GAAG,MAAMF,QAAN,CAAeC,UAAf,CAAd;AAEA,UAAME,eAAoB,GAAGP,WAAW,CAACQ,SAAZ,CAAsBC,IAAtB,CAA2BC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,KAAKC,QAAL,CAAcD,IAAzD,CAA7B;AAEA,UAAME,QAAQ,GAAG,KAAKD,QAAL,CAAcE,cAAd,CAA6BC,GAA7B,CAAiCC,MAAM,IAAI;AAC1D,YAAMC,aAAa,GAAGV,eAAe,CAACW,OAAhB,CAAwBT,IAAxB,CAA8BU,EAAD,IAAaA,EAAE,CAACR,IAAH,KAAYK,MAAM,CAACI,KAA7D,CAAtB;AACA,aACEH,aAAa,IAAI,IAAjB,gBACE;AAAA,gCACE,QAAC,UAAD;AAAY,UAAA,IAAI,EAAED,MAAM,CAACK,IAAzB;AAA+B,UAAA,QAAQ,EAAEJ,aAAa,CAACK;AAAvD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,eAAD;AACgB,UAAA,UAAU,EAAEL,aAAa,CAACM;AAD1C,WAAsBN,aAAa,CAACN,IAAd,GAAqB,oBAA3C;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,sBADF,GAMI,IAPN;AASD,KAXgB,CAAjB;AAaA,UAAMa,MAAM,GAAGC,KAAK,CAACnB,KAAK,CAACoB,MAAN,GAAe,CAAhB,CAApB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,KAAK,CAACoB,MAAN,GAAe,CAAnC,EAAsCC,CAAC,EAAvC,EAA2C;AACzC,YAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAG,CAAf,CAAd;AACAH,MAAAA,MAAM,CAACG,CAAD,CAAN,GAAaA,CAAC,GAAG,CAAJ,KAAU,CAAX,GAAgBrB,KAAK,CAACsB,KAAD,CAArB,GAA+Bf,QAAQ,CAACe,KAAD,CAAnD;AACD;;AAED,WAAOJ,MAAP;AACD;;AA1B4D;AA6B/D,eAAerB,gBAAf","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { SurveyQuestionRadiogroup } from 'survey-react';\nimport * as React from 'react';\nimport contentData from '../data/content.json';\nimport RadioDefinition from './RadioDefinition';\nimport HelpButton from './HelpButton';\n\nexport class CustomRadiogroup extends SurveyQuestionRadiogroup {\n  protected getItems(cssClasses: any): Array<any> {\n    const items = super.getItems(cssClasses);\n\n    const contentQuestion: any = contentData.questions.find(q => q.name === this.question.name);\n\n    const elements = this.question.visibleChoices.map(choice => {\n      const contentChoice = contentQuestion.choices.find((cq: any) => cq.name === choice.value);\n      return (\n        contentChoice != null ? (\n          <>\n            <HelpButton name={choice.text} examples={contentChoice.examples} />\n            <RadioDefinition key={contentChoice.name + \"__customradiogroup\"}\n                            definition={contentChoice.definition}  />\n          </>\n        ) : null\n      )\n    });\n\n    const merged = Array(items.length * 2);\n    for (let i = 0; i < items.length * 2; i++) {\n      const index = Math.floor(i / 2);\n      merged[i] = (i % 2 === 0) ? items[index] : elements[index];\n    }\n\n    return merged;\n  }\n}\n\nexport default CustomRadiogroup;"]},"metadata":{},"sourceType":"module"}