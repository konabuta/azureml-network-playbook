{"ast":null,"code":"import _toConsumableArray from\"/home/runner/work/azureml-network-playbook/azureml-network-playbook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _createForOfIteratorHelper from\"/home/runner/work/azureml-network-playbook/azureml-network-playbook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _slicedToArray from\"/home/runner/work/azureml-network-playbook/azureml-network-playbook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{TaskCard}from'../models/Types';import{Octokit}from\"@octokit/rest\";import{throttling}from\"@octokit/plugin-throttling\";import{Dialog,DialogType,DialogFooter}from'@fluentui/react/lib/Dialog';import{TextField}from'@fluentui/react/lib/TextField';import{PrimaryButton,DefaultButton}from'@fluentui/react/lib/Button';import{ProgressIndicator}from'@fluentui/react/lib/ProgressIndicator';// Fluent UI props\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var modelProps={isBlocking:false,styles:{main:{maxWidth:450}}};var dialogContentProps={type:DialogType.largeHeader,title:'Github Export'};var GithubExportForm=function GithubExportForm(_ref){var taskMap=_ref.taskMap,numTasks=_ref.numTasks,showForm=_ref.showForm,onClose=_ref.onClose;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),authToken=_useState2[0],setAuthToken=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),repoOwner=_useState4[0],setRepoOwner=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),repoName=_useState6[0],setRepoName=_useState6[1];var _useState7=useState(0),_useState8=_slicedToArray(_useState7,2),progress=_useState8[0],setProgress=_useState8[1];var _useState9=useState(Array()),_useState10=_slicedToArray(_useState9,2),failureLog=_useState10[0],setFailureLog=_useState10[1];var categories=Array.from(taskMap.keys());var handleGithubExport=function handleGithubExport(){var Throttlekit=Octokit.plugin(throttling);var octokit=new Throttlekit({auth:authToken,throttle:{onRateLimit:function onRateLimit(retryAfter,options,octokit){octokit.log.warn(\"Request quota exhausted for request \".concat(options.method,\" \").concat(options.url));if(options.request.retryCount===0){// only retries once\noctokit.log.info(\"Retrying after \".concat(retryAfter,\" seconds!\"));return true;}},onAbuseLimit:function onAbuseLimit(retryAfter,options,octokit){// does not retry, only logs a warning\noctokit.log.warn(\"Abuse detected for request \".concat(options.method,\" \").concat(options.url));}}});// Counts the number of finished promises\n// The count has to be wrapped in a closure to avoid race conditions\n// Fixes eslint no-loop-func warning\nfunction progressIncrementer(){var numFinished=0;function update(){numFinished+=1;setProgress(numFinished/numTasks);}return update;}var updateProgress=progressIncrementer();var _iterator=_createForOfIteratorHelper(categories),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _taskMap$get;var category=_step.value;var taskCards=TaskCard.filterTasks((_taskMap$get=taskMap.get(category))!==null&&_taskMap$get!==void 0?_taskMap$get:[]);var _iterator2=_createForOfIteratorHelper(taskCards),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var card=_step2.value;var _iterator3=_createForOfIteratorHelper(card.tasks),_step3;try{var _loop=function _loop(){var task=_step3.value;var title=\"\".concat(category,\": \").concat(task.name);octokit.issues.create({owner:repoOwner,repo:repoName,title:title,body:task.details}).then(function(){console.log(\"Issue creation succeded\",title);}).catch(function(reason){console.log(\"Issue creation failed\",reason);setFailureLog([].concat(_toConsumableArray(failureLog),[reason]));}).finally(function(){updateProgress();});};for(_iterator3.s();!(_step3=_iterator3.n()).done;){_loop();}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}}catch(err){_iterator.e(err);}finally{_iterator.f();}};return/*#__PURE__*/_jsxs(Dialog,{hidden:!showForm,onDismiss:function onDismiss(){return onClose();},dialogContentProps:dialogContentProps,modalProps:modelProps,children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"This form will export your survey results to issues on your GitHub repository.\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Go to the \",/*#__PURE__*/_jsx(\"a\",{href:\"https://github.com/settings/tokens\",children:\"token section of GitHub Developer Settings\"}),\" to generate a personal access token.\"]})]}),/*#__PURE__*/_jsx(TextField,{label:\"Repo owner\",onChange:function onChange(_,newValue){return setRepoOwner(newValue!==null&&newValue!==void 0?newValue:\"\");}}),/*#__PURE__*/_jsx(TextField,{label:\"Repo name\",onChange:function onChange(_,newValue){return setRepoName(newValue!==null&&newValue!==void 0?newValue:\"\");}}),/*#__PURE__*/_jsx(TextField,{label:\"Personal access token\",onChange:function onChange(_,newValue){return setAuthToken(newValue!==null&&newValue!==void 0?newValue:\"\");}}),progress>0?/*#__PURE__*/_jsx(ProgressIndicator,{label:\"Creating issues\",description:\"Issues are being created in your Github repository\",percentComplete:progress}):null,failureLog.map(function(failure){return/*#__PURE__*/_jsxs(\"div\",{style:{color:\"red\"},children:[\"[Error] \",\"\".concat(failure)]});}),/*#__PURE__*/_jsxs(DialogFooter,{children:[/*#__PURE__*/_jsx(PrimaryButton,{onClick:function onClick(){return handleGithubExport();},text:\"Export\"}),/*#__PURE__*/_jsx(DefaultButton,{onClick:function onClick(){return onClose();},text:\"Cancel\"})]})]});};export default GithubExportForm;","map":{"version":3,"sources":["/home/runner/work/azureml-network-playbook/azureml-network-playbook/src/components/GithubExportForm.tsx"],"names":["React","useState","TaskCard","Octokit","throttling","Dialog","DialogType","DialogFooter","TextField","PrimaryButton","DefaultButton","ProgressIndicator","modelProps","isBlocking","styles","main","maxWidth","dialogContentProps","type","largeHeader","title","GithubExportForm","taskMap","numTasks","showForm","onClose","authToken","setAuthToken","repoOwner","setRepoOwner","repoName","setRepoName","progress","setProgress","Array","failureLog","setFailureLog","categories","from","keys","handleGithubExport","Throttlekit","plugin","octokit","auth","throttle","onRateLimit","retryAfter","options","log","warn","method","url","request","retryCount","info","onAbuseLimit","progressIncrementer","numFinished","update","updateProgress","category","taskCards","filterTasks","get","card","tasks","task","name","issues","create","owner","repo","body","details","then","console","catch","reason","finally","_","newValue","map","failure","color"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { TaskCard } from '../models/Types';\nimport { Octokit } from \"@octokit/rest\";\nimport { throttling } from \"@octokit/plugin-throttling\";\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';\nimport { TextField } from '@fluentui/react/lib/TextField';\nimport { PrimaryButton, DefaultButton } from '@fluentui/react/lib/Button';\nimport { ProgressIndicator } from '@fluentui/react/lib/ProgressIndicator';\n\n// Fluent UI props\nconst modelProps = {\n  isBlocking: false,\n  styles: { main: { maxWidth: 450 } },\n};\nconst dialogContentProps = {\n  type: DialogType.largeHeader,\n  title: 'Github Export',\n};\n\ninterface GithubExportProps {\n  taskMap: Map<string, TaskCard[]>;\n  numTasks: number;\n  showForm: boolean;\n  onClose: Function;\n}\n\nconst GithubExportForm: React.FunctionComponent<GithubExportProps> = ({ taskMap, numTasks, showForm, onClose }) => {\n  const [authToken, setAuthToken] = useState(\"\");\n  const [repoOwner, setRepoOwner] = useState(\"\");\n  const [repoName, setRepoName] = useState(\"\");\n  const [progress, setProgress] = useState(0);\n  const [failureLog, setFailureLog] = useState(Array<any>());\n  const categories = Array.from(taskMap.keys());\n\n  const handleGithubExport = () => {\n    const Throttlekit = Octokit.plugin(throttling);\n    const octokit = new Throttlekit({\n      auth: authToken,\n      throttle: {\n        onRateLimit: (retryAfter: any, options: any, octokit: any) => {\n          octokit.log.warn(`Request quota exhausted for request ${options.method} ${options.url}`);\n          if (options.request.retryCount === 0) {\n            // only retries once\n            octokit.log.info(`Retrying after ${retryAfter} seconds!`);\n            return true;\n          }\n        },\n        onAbuseLimit: (retryAfter: any, options: any, octokit: any) => {\n          // does not retry, only logs a warning\n          octokit.log.warn(`Abuse detected for request ${options.method} ${options.url}`);\n        },\n      },\n    });\n\n    // Counts the number of finished promises\n    // The count has to be wrapped in a closure to avoid race conditions\n    // Fixes eslint no-loop-func warning\n    function progressIncrementer() {\n      let numFinished = 0;\n      function update() {\n        numFinished += 1;\n        setProgress(numFinished / numTasks);\n      }\n      return update;\n    }\n\n    let updateProgress = progressIncrementer();\n    for (const category of categories) {\n      const taskCards = TaskCard.filterTasks(taskMap.get(category) ?? []);\n      for (const card of taskCards) {\n        for (const task of card.tasks) {\n          let title = `${category}: ${task.name}`;\n          octokit.issues.create({\n            owner: repoOwner,\n            repo: repoName,\n            title: title,\n            body: task.details\n          }).then(() => {\n            console.log(\"Issue creation succeded\", title);\n          }).catch((reason) => {\n            console.log(\"Issue creation failed\", reason);\n            setFailureLog([...failureLog, reason]);\n          }).finally(() => {\n            updateProgress();\n          });\n        }\n      }\n    }\n  }\n\n  return (\n    <Dialog\n      hidden={!showForm}\n      onDismiss={() => onClose()}\n      dialogContentProps={dialogContentProps}\n      modalProps={modelProps}\n    >\n      <div>\n        <p>This form will export your survey results to issues on your GitHub repository.</p>\n        <p>Go to the <a href=\"https://github.com/settings/tokens\">token section of GitHub Developer Settings</a> to generate a personal access token.</p>\n      </div>\n      <TextField label=\"Repo owner\" onChange={(_, newValue) => setRepoOwner(newValue ?? \"\")}  />\n      <TextField label=\"Repo name\" onChange={(_, newValue) => setRepoName(newValue ?? \"\")}  />\n      <TextField label=\"Personal access token\" onChange={(_, newValue) => setAuthToken(newValue ?? \"\")}  />\n      {progress > 0 ? (\n        <ProgressIndicator label=\"Creating issues\" description=\"Issues are being created in your Github repository\" percentComplete={progress} />\n      ) : null}\n      {failureLog.map((failure) =>\n        (<div style={{ color: \"red\" }}>[Error] {`${failure}`}</div>)\n      )}\n      <DialogFooter>\n        <PrimaryButton onClick={() => handleGithubExport()} text=\"Export\" />\n        <DefaultButton onClick={() => onClose()} text=\"Cancel\" />\n      </DialogFooter>\n    </Dialog>\n  )\n}\n\nexport default GithubExportForm;"]},"metadata":{},"sourceType":"module"}