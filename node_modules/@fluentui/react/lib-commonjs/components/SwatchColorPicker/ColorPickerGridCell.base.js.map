{"version":3,"file":"ColorPickerGridCell.base.js","sourceRoot":"../src/","sources":["components/SwatchColorPicker/ColorPickerGridCell.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ITheme, mergeStyleSets, IProcessedStyleSet } from '../../Styling';\nimport { classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { getColorFromString } from '../../Color';\nimport { ButtonGridCell } from '../../utilities/ButtonGrid/ButtonGridCell';\nimport { getStyles as getActionButtonStyles } from '../Button/ActionButton/ActionButton.styles';\nimport { IButtonClassNames } from '../Button/BaseButton.classNames';\nimport {\n  IColorCellProps,\n  IColorPickerGridCellProps,\n  IColorPickerGridCellStyleProps,\n  IColorPickerGridCellStyles,\n} from './ColorPickerGridCell.types';\n\nconst getClassNames = classNamesFunction<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>();\n\n/** Validate if the cell's color is white or not to apply whiteCell style */\nconst isWhiteCell = (inputColor: string): boolean => {\n  const currentColor = getColorFromString(inputColor!);\n  return currentColor?.hex === 'ffffff';\n};\n\nconst getColorPickerGridCellButtonClassNames = memoizeFunction(\n  (\n    theme: ITheme,\n    className: string,\n    variantClassName: string,\n    iconClassName: string | undefined,\n    menuIconClassName: string | undefined,\n    disabled: boolean,\n    checked: boolean,\n    expanded: boolean,\n    isSplit: boolean | undefined,\n  ): IButtonClassNames => {\n    const styles = getActionButtonStyles(theme);\n    return mergeStyleSets({\n      root: [\n        'ms-Button',\n        styles.root,\n        variantClassName,\n        className,\n        checked && ['is-checked', styles.rootChecked],\n        disabled && ['is-disabled', styles.rootDisabled],\n        !disabled &&\n          !checked && {\n            selectors: {\n              ':hover': styles.rootHovered,\n              ':focus': styles.rootFocused,\n              ':active': styles.rootPressed,\n            },\n          },\n        disabled && checked && [styles.rootCheckedDisabled],\n        !disabled &&\n          checked && {\n            selectors: {\n              ':hover': styles.rootCheckedHovered,\n              ':active': styles.rootCheckedPressed,\n            },\n          },\n      ],\n      flexContainer: ['ms-Button-flexContainer', styles.flexContainer],\n    });\n  },\n);\n\nexport const ColorPickerGridCellBase: React.FunctionComponent<IColorPickerGridCellProps> = props => {\n  const {\n    item,\n    // eslint-disable-next-line deprecation/deprecation\n    idPrefix = props.id,\n    selected = false,\n    disabled = false,\n    styles,\n    circle = true,\n    color,\n    onClick,\n    onHover,\n    onFocus,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onWheel,\n    onKeyDown,\n    height,\n    width,\n    borderWidth,\n  } = props;\n\n  const classNames: IProcessedStyleSet<IColorPickerGridCellStyles> = getClassNames(styles!, {\n    theme: props.theme!,\n    disabled,\n    selected,\n    circle,\n    isWhite: isWhiteCell(color!),\n    height,\n    width,\n    borderWidth,\n  });\n\n  // Render the core of a color cell\n  const onRenderColorOption = (colorOption: IColorCellProps): JSX.Element => {\n    const svgClassName = classNames.svg;\n\n    // Build an SVG for the cell with the given shape and color properties\n    return (\n      <svg className={svgClassName} viewBox=\"0 0 20 20\" fill={getColorFromString(colorOption.color as string)?.str}>\n        {circle ? <circle cx=\"50%\" cy=\"50%\" r=\"50%\" /> : <rect width=\"100%\" height=\"100%\" />}\n      </svg>\n    );\n  };\n\n  return (\n    <ButtonGridCell\n      item={item}\n      id={`${idPrefix}-${item.id}-${item.index}`}\n      key={item.id}\n      disabled={disabled}\n      role={'gridcell'}\n      // eslint-disable-next-line react/jsx-no-bind\n      onRenderItem={onRenderColorOption}\n      selected={selected}\n      onClick={onClick}\n      onHover={onHover}\n      onFocus={onFocus}\n      label={item.label}\n      className={classNames.colorCell}\n      getClassNames={getColorPickerGridCellButtonClassNames}\n      index={item.index}\n      onMouseEnter={onMouseEnter}\n      onMouseMove={onMouseMove}\n      onMouseLeave={onMouseLeave}\n      onWheel={onWheel}\n      onKeyDown={onKeyDown}\n    />\n  );\n};\n"]}